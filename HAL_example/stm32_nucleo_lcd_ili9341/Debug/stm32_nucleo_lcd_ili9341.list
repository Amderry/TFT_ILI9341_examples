
stm32_nucleo_lcd_ili9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005aa8  0800399c  0800399c  0000499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009444  08009444  0000b028  2**0
                  CONTENTS
  4 .ARM          00000000  08009444  08009444  0000b028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009444  08009444  0000b028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009444  08009444  0000a444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009448  08009448  0000a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800944c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000028  08009474  0000b028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08009474  0000b134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009878  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175c  00000000  00000000  000148c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000665  00000000  00000000  00016870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fca9  00000000  00000000  00016ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b718  00000000  00000000  00026b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ed0e  00000000  00000000  00032296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00090fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb0  00000000  00000000  00090fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00092c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003984 	.word	0x08003984

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08003984 	.word	0x08003984

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
	DISP_DC_CMD;
 800022c:	4b14      	ldr	r3, [pc, #80]	@ (8000280 <ILI9341_Write_Command+0x60>)
 800022e:	2200      	movs	r2, #0
 8000230:	2180      	movs	r1, #128	@ 0x80
 8000232:	0018      	movs	r0, r3
 8000234:	f002 fa82 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000238:	2380      	movs	r3, #128	@ 0x80
 800023a:	0059      	lsls	r1, r3, #1
 800023c:	2390      	movs	r3, #144	@ 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2200      	movs	r2, #0
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fa7a 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = Command;
 8000248:	4a0e      	ldr	r2, [pc, #56]	@ (8000284 <ILI9341_Write_Command+0x64>)
 800024a:	1dfb      	adds	r3, r7, #7
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000250:	46c0      	nop			@ (mov r8, r8)
 8000252:	4b0d      	ldr	r3, [pc, #52]	@ (8000288 <ILI9341_Write_Command+0x68>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	2202      	movs	r2, #2
 8000258:	4013      	ands	r3, r2
 800025a:	d0fa      	beq.n	8000252 <ILI9341_Write_Command+0x32>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	4b0a      	ldr	r3, [pc, #40]	@ (8000288 <ILI9341_Write_Command+0x68>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	2280      	movs	r2, #128	@ 0x80
 8000264:	4013      	ands	r3, r2
 8000266:	d1fa      	bne.n	800025e <ILI9341_Write_Command+0x3e>
	DISP_CS_UNSELECT;
 8000268:	2380      	movs	r3, #128	@ 0x80
 800026a:	0059      	lsls	r1, r3, #1
 800026c:	2390      	movs	r3, #144	@ 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2201      	movs	r2, #1
 8000272:	0018      	movs	r0, r3
 8000274:	f002 fa62 	bl	800273c <HAL_GPIO_WritePin>
}
 8000278:	46c0      	nop			@ (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}
 8000280:	48000800 	.word	0x48000800
 8000284:	4001300c 	.word	0x4001300c
 8000288:	40013000 	.word	0x40013000

0800028c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	0002      	movs	r2, r0
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	701a      	strb	r2, [r3, #0]
	DISP_DC_DATA;
 8000298:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <ILI9341_Write_Data+0x60>)
 800029a:	2201      	movs	r2, #1
 800029c:	2180      	movs	r1, #128	@ 0x80
 800029e:	0018      	movs	r0, r3
 80002a0:	f002 fa4c 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	0059      	lsls	r1, r3, #1
 80002a8:	2390      	movs	r3, #144	@ 0x90
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	2200      	movs	r2, #0
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fa44 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = Data;
 80002b4:	4a0e      	ldr	r2, [pc, #56]	@ (80002f0 <ILI9341_Write_Data+0x64>)
 80002b6:	1dfb      	adds	r3, r7, #7
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80002bc:	46c0      	nop			@ (mov r8, r8)
 80002be:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <ILI9341_Write_Data+0x68>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	2202      	movs	r2, #2
 80002c4:	4013      	ands	r3, r2
 80002c6:	d0fa      	beq.n	80002be <ILI9341_Write_Data+0x32>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80002c8:	46c0      	nop			@ (mov r8, r8)
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <ILI9341_Write_Data+0x68>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	2280      	movs	r2, #128	@ 0x80
 80002d0:	4013      	ands	r3, r2
 80002d2:	d1fa      	bne.n	80002ca <ILI9341_Write_Data+0x3e>
	DISP_CS_UNSELECT;
 80002d4:	2380      	movs	r3, #128	@ 0x80
 80002d6:	0059      	lsls	r1, r3, #1
 80002d8:	2390      	movs	r3, #144	@ 0x90
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	2201      	movs	r2, #1
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 fa2c 	bl	800273c <HAL_GPIO_WritePin>
}
 80002e4:	46c0      	nop			@ (mov r8, r8)
 80002e6:	46bd      	mov	sp, r7
 80002e8:	b002      	add	sp, #8
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	48000800 	.word	0x48000800
 80002f0:	4001300c 	.word	0x4001300c
 80002f4:	40013000 	.word	0x40013000

080002f8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	0005      	movs	r5, r0
 8000300:	000c      	movs	r4, r1
 8000302:	0010      	movs	r0, r2
 8000304:	0019      	movs	r1, r3
 8000306:	1dbb      	adds	r3, r7, #6
 8000308:	1c2a      	adds	r2, r5, #0
 800030a:	801a      	strh	r2, [r3, #0]
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	1c22      	adds	r2, r4, #0
 8000310:	801a      	strh	r2, [r3, #0]
 8000312:	1cbb      	adds	r3, r7, #2
 8000314:	1c02      	adds	r2, r0, #0
 8000316:	801a      	strh	r2, [r3, #0]
 8000318:	003b      	movs	r3, r7
 800031a:	1c0a      	adds	r2, r1, #0
 800031c:	801a      	strh	r2, [r3, #0]
	DISP_DC_CMD;
 800031e:	4b65      	ldr	r3, [pc, #404]	@ (80004b4 <ILI9341_Set_Address+0x1bc>)
 8000320:	2200      	movs	r2, #0
 8000322:	2180      	movs	r1, #128	@ 0x80
 8000324:	0018      	movs	r0, r3
 8000326:	f002 fa09 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800032a:	2380      	movs	r3, #128	@ 0x80
 800032c:	0059      	lsls	r1, r3, #1
 800032e:	2390      	movs	r3, #144	@ 0x90
 8000330:	05db      	lsls	r3, r3, #23
 8000332:	2200      	movs	r2, #0
 8000334:	0018      	movs	r0, r3
 8000336:	f002 fa01 	bl	800273c <HAL_GPIO_WritePin>

	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x2A;
 800033a:	4b5f      	ldr	r3, [pc, #380]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 800033c:	222a      	movs	r2, #42	@ 0x2a
 800033e:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	4b5e      	ldr	r3, [pc, #376]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	2202      	movs	r2, #2
 8000348:	4013      	ands	r3, r2
 800034a:	d0fa      	beq.n	8000342 <ILI9341_Set_Address+0x4a>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	4b5b      	ldr	r3, [pc, #364]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	2280      	movs	r2, #128	@ 0x80
 8000354:	4013      	ands	r3, r2
 8000356:	d1fa      	bne.n	800034e <ILI9341_Set_Address+0x56>

	DISP_DC_DATA;
 8000358:	4b56      	ldr	r3, [pc, #344]	@ (80004b4 <ILI9341_Set_Address+0x1bc>)
 800035a:	2201      	movs	r2, #1
 800035c:	2180      	movs	r1, #128	@ 0x80
 800035e:	0018      	movs	r0, r3
 8000360:	f002 f9ec 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)(X1 >> 8);
 8000364:	1dbb      	adds	r3, r7, #6
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	0a1b      	lsrs	r3, r3, #8
 800036a:	b29a      	uxth	r2, r3
 800036c:	4b52      	ldr	r3, [pc, #328]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 800036e:	b2d2      	uxtb	r2, r2
 8000370:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000372:	46c0      	nop			@ (mov r8, r8)
 8000374:	4b51      	ldr	r3, [pc, #324]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	2202      	movs	r2, #2
 800037a:	4013      	ands	r3, r2
 800037c:	d0fa      	beq.n	8000374 <ILI9341_Set_Address+0x7c>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)X1;
 800037e:	4a4e      	ldr	r2, [pc, #312]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 8000380:	1dbb      	adds	r3, r7, #6
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	b2db      	uxtb	r3, r3
 8000386:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000388:	46c0      	nop			@ (mov r8, r8)
 800038a:	4b4c      	ldr	r3, [pc, #304]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	2202      	movs	r2, #2
 8000390:	4013      	ands	r3, r2
 8000392:	d0fa      	beq.n	800038a <ILI9341_Set_Address+0x92>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)(X2 >> 8);
 8000394:	1cbb      	adds	r3, r7, #2
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	0a1b      	lsrs	r3, r3, #8
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b46      	ldr	r3, [pc, #280]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	4b45      	ldr	r3, [pc, #276]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	2202      	movs	r2, #2
 80003aa:	4013      	ands	r3, r2
 80003ac:	d0fa      	beq.n	80003a4 <ILI9341_Set_Address+0xac>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)X2;
 80003ae:	4a42      	ldr	r2, [pc, #264]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 80003b0:	1cbb      	adds	r3, r7, #2
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80003b8:	46c0      	nop			@ (mov r8, r8)
 80003ba:	4b40      	ldr	r3, [pc, #256]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	2202      	movs	r2, #2
 80003c0:	4013      	ands	r3, r2
 80003c2:	d0fa      	beq.n	80003ba <ILI9341_Set_Address+0xc2>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	4b3d      	ldr	r3, [pc, #244]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	4013      	ands	r3, r2
 80003ce:	d1fa      	bne.n	80003c6 <ILI9341_Set_Address+0xce>

	DISP_DC_CMD;
 80003d0:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <ILI9341_Set_Address+0x1bc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	2180      	movs	r1, #128	@ 0x80
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 f9b0 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x2B;
 80003dc:	4b36      	ldr	r3, [pc, #216]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 80003de:	222b      	movs	r2, #43	@ 0x2b
 80003e0:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	2202      	movs	r2, #2
 80003ea:	4013      	ands	r3, r2
 80003ec:	d0fa      	beq.n	80003e4 <ILI9341_Set_Address+0xec>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	2280      	movs	r2, #128	@ 0x80
 80003f6:	4013      	ands	r3, r2
 80003f8:	d1fa      	bne.n	80003f0 <ILI9341_Set_Address+0xf8>

	DISP_DC_DATA;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <ILI9341_Set_Address+0x1bc>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	2180      	movs	r1, #128	@ 0x80
 8000400:	0018      	movs	r0, r3
 8000402:	f002 f99b 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)(Y1 >> 8);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b29a      	uxth	r2, r3
 800040e:	4b2a      	ldr	r3, [pc, #168]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	4b29      	ldr	r3, [pc, #164]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	2202      	movs	r2, #2
 800041c:	4013      	ands	r3, r2
 800041e:	d0fa      	beq.n	8000416 <ILI9341_Set_Address+0x11e>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)Y1;
 8000420:	4a25      	ldr	r2, [pc, #148]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	b2db      	uxtb	r3, r3
 8000428:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	2202      	movs	r2, #2
 8000432:	4013      	ands	r3, r2
 8000434:	d0fa      	beq.n	800042c <ILI9341_Set_Address+0x134>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)(Y2 >> 8);
 8000436:	003b      	movs	r3, r7
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	0a1b      	lsrs	r3, r3, #8
 800043c:	b29a      	uxth	r2, r3
 800043e:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 8000440:	b2d2      	uxtb	r2, r2
 8000442:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	4b1d      	ldr	r3, [pc, #116]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	2202      	movs	r2, #2
 800044c:	4013      	ands	r3, r2
 800044e:	d0fa      	beq.n	8000446 <ILI9341_Set_Address+0x14e>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (uint8_t)Y2;
 8000450:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 8000452:	003b      	movs	r3, r7
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	4b17      	ldr	r3, [pc, #92]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 800045e:	689b      	ldr	r3, [r3, #8]
 8000460:	2202      	movs	r2, #2
 8000462:	4013      	ands	r3, r2
 8000464:	d0fa      	beq.n	800045c <ILI9341_Set_Address+0x164>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	2280      	movs	r2, #128	@ 0x80
 800046e:	4013      	ands	r3, r2
 8000470:	d1fa      	bne.n	8000468 <ILI9341_Set_Address+0x170>

	DISP_DC_CMD;
 8000472:	4b10      	ldr	r3, [pc, #64]	@ (80004b4 <ILI9341_Set_Address+0x1bc>)
 8000474:	2200      	movs	r2, #0
 8000476:	2180      	movs	r1, #128	@ 0x80
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f95f 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x2C;
 800047e:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <ILI9341_Set_Address+0x1c0>)
 8000480:	222c      	movs	r2, #44	@ 0x2c
 8000482:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	2202      	movs	r2, #2
 800048c:	4013      	ands	r3, r2
 800048e:	d0fa      	beq.n	8000486 <ILI9341_Set_Address+0x18e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <ILI9341_Set_Address+0x1c4>)
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	2280      	movs	r2, #128	@ 0x80
 8000498:	4013      	ands	r3, r2
 800049a:	d1fa      	bne.n	8000492 <ILI9341_Set_Address+0x19a>
	DISP_CS_UNSELECT;
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	0059      	lsls	r1, r3, #1
 80004a0:	2390      	movs	r3, #144	@ 0x90
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	2201      	movs	r2, #1
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 f948 	bl	800273c <HAL_GPIO_WritePin>
}
 80004ac:	46c0      	nop			@ (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bdb0      	pop	{r4, r5, r7, pc}
 80004b4:	48000800 	.word	0x48000800
 80004b8:	4001300c 	.word	0x4001300c
 80004bc:	40013000 	.word	0x40013000

080004c0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	0099      	lsls	r1, r3, #2
 80004c8:	2390      	movs	r3, #144	@ 0x90
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2200      	movs	r2, #0
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 f934 	bl	800273c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80004d4:	20c8      	movs	r0, #200	@ 0xc8
 80004d6:	f001 fee9 	bl	80022ac <HAL_Delay>
	DISP_CS_SELECT;
 80004da:	2380      	movs	r3, #128	@ 0x80
 80004dc:	0059      	lsls	r1, r3, #1
 80004de:	2390      	movs	r3, #144	@ 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2200      	movs	r2, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 f929 	bl	800273c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80004ea:	20c8      	movs	r0, #200	@ 0xc8
 80004ec:	f001 fede 	bl	80022ac <HAL_Delay>
	DISP_RST_WORK;
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	0099      	lsls	r1, r3, #2
 80004f4:	2390      	movs	r3, #144	@ 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2201      	movs	r2, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f002 f91e 	bl	800273c <HAL_GPIO_WritePin>
}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	0002      	movs	r2, r0
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	701a      	strb	r2, [r3, #0]
	DISP_DC_CMD;
 8000514:	4b31      	ldr	r3, [pc, #196]	@ (80005dc <ILI9341_Set_Rotation+0xd4>)
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	@ 0x80
 800051a:	0018      	movs	r0, r3
 800051c:	f002 f90e 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	0059      	lsls	r1, r3, #1
 8000524:	2390      	movs	r3, #144	@ 0x90
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2200      	movs	r2, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f002 f906 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x36;
 8000530:	4b2b      	ldr	r3, [pc, #172]	@ (80005e0 <ILI9341_Set_Rotation+0xd8>)
 8000532:	2236      	movs	r2, #54	@ 0x36
 8000534:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <ILI9341_Set_Rotation+0xdc>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	2202      	movs	r2, #2
 800053e:	4013      	ands	r3, r2
 8000540:	d0fa      	beq.n	8000538 <ILI9341_Set_Rotation+0x30>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <ILI9341_Set_Rotation+0xdc>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	4013      	ands	r3, r2
 800054c:	d1fa      	bne.n	8000544 <ILI9341_Set_Rotation+0x3c>
	DISP_CS_UNSELECT;
 800054e:	2380      	movs	r3, #128	@ 0x80
 8000550:	0059      	lsls	r1, r3, #1
 8000552:	2390      	movs	r3, #144	@ 0x90
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	2201      	movs	r2, #1
 8000558:	0018      	movs	r0, r3
 800055a:	f002 f8ef 	bl	800273c <HAL_GPIO_WritePin>

	switch(Rotation)
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b03      	cmp	r3, #3
 8000564:	d029      	beq.n	80005ba <ILI9341_Set_Rotation+0xb2>
 8000566:	dc33      	bgt.n	80005d0 <ILI9341_Set_Rotation+0xc8>
 8000568:	2b02      	cmp	r3, #2
 800056a:	d01b      	beq.n	80005a4 <ILI9341_Set_Rotation+0x9c>
 800056c:	dc30      	bgt.n	80005d0 <ILI9341_Set_Rotation+0xc8>
 800056e:	2b00      	cmp	r3, #0
 8000570:	d002      	beq.n	8000578 <ILI9341_Set_Rotation+0x70>
 8000572:	2b01      	cmp	r3, #1
 8000574:	d00b      	beq.n	800058e <ILI9341_Set_Rotation+0x86>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
			LCD_WIDTH  = 320;
			LCD_HEIGHT = 240;
			break;
		default:
			break;
 8000576:	e02b      	b.n	80005d0 <ILI9341_Set_Rotation+0xc8>
			ILI9341_Write_Data(0x40|0x08);
 8000578:	2048      	movs	r0, #72	@ 0x48
 800057a:	f7ff fe87 	bl	800028c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800057e:	4b1a      	ldr	r3, [pc, #104]	@ (80005e8 <ILI9341_Set_Rotation+0xe0>)
 8000580:	22f0      	movs	r2, #240	@ 0xf0
 8000582:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000584:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <ILI9341_Set_Rotation+0xe4>)
 8000586:	22a0      	movs	r2, #160	@ 0xa0
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	801a      	strh	r2, [r3, #0]
			break;
 800058c:	e021      	b.n	80005d2 <ILI9341_Set_Rotation+0xca>
			ILI9341_Write_Data(0x20|0x08);
 800058e:	2028      	movs	r0, #40	@ 0x28
 8000590:	f7ff fe7c 	bl	800028c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000594:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <ILI9341_Set_Rotation+0xe0>)
 8000596:	22a0      	movs	r2, #160	@ 0xa0
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800059c:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <ILI9341_Set_Rotation+0xe4>)
 800059e:	22f0      	movs	r2, #240	@ 0xf0
 80005a0:	801a      	strh	r2, [r3, #0]
			break;
 80005a2:	e016      	b.n	80005d2 <ILI9341_Set_Rotation+0xca>
			ILI9341_Write_Data(0x80|0x08);
 80005a4:	2088      	movs	r0, #136	@ 0x88
 80005a6:	f7ff fe71 	bl	800028c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <ILI9341_Set_Rotation+0xe0>)
 80005ac:	22f0      	movs	r2, #240	@ 0xf0
 80005ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <ILI9341_Set_Rotation+0xe4>)
 80005b2:	22a0      	movs	r2, #160	@ 0xa0
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	801a      	strh	r2, [r3, #0]
			break;
 80005b8:	e00b      	b.n	80005d2 <ILI9341_Set_Rotation+0xca>
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80005ba:	20e8      	movs	r0, #232	@ 0xe8
 80005bc:	f7ff fe66 	bl	800028c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80005c0:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <ILI9341_Set_Rotation+0xe0>)
 80005c2:	22a0      	movs	r2, #160	@ 0xa0
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <ILI9341_Set_Rotation+0xe4>)
 80005ca:	22f0      	movs	r2, #240	@ 0xf0
 80005cc:	801a      	strh	r2, [r3, #0]
			break;
 80005ce:	e000      	b.n	80005d2 <ILI9341_Set_Rotation+0xca>
			break;
 80005d0:	46c0      	nop			@ (mov r8, r8)
	}
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	48000800 	.word	0x48000800
 80005e0:	4001300c 	.word	0x4001300c
 80005e4:	40013000 	.word	0x40013000
 80005e8:	20000002 	.word	0x20000002
 80005ec:	20000000 	.word	0x20000000

080005f0 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	0099      	lsls	r1, r3, #2
 80005f8:	2390      	movs	r3, #144	@ 0x90
 80005fa:	05db      	lsls	r3, r3, #23
 80005fc:	2201      	movs	r2, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f002 f89c 	bl	800273c <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 8000604:	f7ff ff5c 	bl	80004c0 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff fe09 	bl	8000220 <ILI9341_Write_Command>
	HAL_Delay(1000);
 800060e:	23fa      	movs	r3, #250	@ 0xfa
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fe4a 	bl	80022ac <HAL_Delay>

	
	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8000618:	20cb      	movs	r0, #203	@ 0xcb
 800061a:	f7ff fe01 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 800061e:	2039      	movs	r0, #57	@ 0x39
 8000620:	f7ff fe34 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8000624:	202c      	movs	r0, #44	@ 0x2c
 8000626:	f7ff fe31 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff fe2e 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8000630:	2034      	movs	r0, #52	@ 0x34
 8000632:	f7ff fe2b 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8000636:	2002      	movs	r0, #2
 8000638:	f7ff fe28 	bl	800028c <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800063c:	20cf      	movs	r0, #207	@ 0xcf
 800063e:	f7ff fdef 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fe22 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8000648:	20c1      	movs	r0, #193	@ 0xc1
 800064a:	f7ff fe1f 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 800064e:	2030      	movs	r0, #48	@ 0x30
 8000650:	f7ff fe1c 	bl	800028c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8000654:	20e8      	movs	r0, #232	@ 0xe8
 8000656:	f7ff fde3 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 800065a:	2085      	movs	r0, #133	@ 0x85
 800065c:	f7ff fe16 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fe13 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8000666:	2078      	movs	r0, #120	@ 0x78
 8000668:	f7ff fe10 	bl	800028c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800066c:	20ea      	movs	r0, #234	@ 0xea
 800066e:	f7ff fdd7 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fe0a 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000678:	2000      	movs	r0, #0
 800067a:	f7ff fe07 	bl	800028c <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 800067e:	20ed      	movs	r0, #237	@ 0xed
 8000680:	f7ff fdce 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f7ff fe01 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800068a:	2003      	movs	r0, #3
 800068c:	f7ff fdfe 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8000690:	2012      	movs	r0, #18
 8000692:	f7ff fdfb 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8000696:	2081      	movs	r0, #129	@ 0x81
 8000698:	f7ff fdf8 	bl	800028c <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800069c:	20f7      	movs	r0, #247	@ 0xf7
 800069e:	f7ff fdbf 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f7ff fdf2 	bl	800028c <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80006a8:	20c0      	movs	r0, #192	@ 0xc0
 80006aa:	f7ff fdb9 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80006ae:	2023      	movs	r0, #35	@ 0x23
 80006b0:	f7ff fdec 	bl	800028c <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80006b4:	20c1      	movs	r0, #193	@ 0xc1
 80006b6:	f7ff fdb3 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80006ba:	2010      	movs	r0, #16
 80006bc:	f7ff fde6 	bl	800028c <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80006c0:	20c5      	movs	r0, #197	@ 0xc5
 80006c2:	f7ff fdad 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80006c6:	203e      	movs	r0, #62	@ 0x3e
 80006c8:	f7ff fde0 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80006cc:	2028      	movs	r0, #40	@ 0x28
 80006ce:	f7ff fddd 	bl	800028c <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80006d2:	20c7      	movs	r0, #199	@ 0xc7
 80006d4:	f7ff fda4 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80006d8:	2086      	movs	r0, #134	@ 0x86
 80006da:	f7ff fdd7 	bl	800028c <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80006de:	2036      	movs	r0, #54	@ 0x36
 80006e0:	f7ff fd9e 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80006e4:	2048      	movs	r0, #72	@ 0x48
 80006e6:	f7ff fdd1 	bl	800028c <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 80006ea:	203a      	movs	r0, #58	@ 0x3a
 80006ec:	f7ff fd98 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 80006f0:	2055      	movs	r0, #85	@ 0x55
 80006f2:	f7ff fdcb 	bl	800028c <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 80006f6:	20b1      	movs	r0, #177	@ 0xb1
 80006f8:	f7ff fd92 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fdc5 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8000702:	2018      	movs	r0, #24
 8000704:	f7ff fdc2 	bl	800028c <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8000708:	20b6      	movs	r0, #182	@ 0xb6
 800070a:	f7ff fd89 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 800070e:	2008      	movs	r0, #8
 8000710:	f7ff fdbc 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8000714:	2082      	movs	r0, #130	@ 0x82
 8000716:	f7ff fdb9 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 800071a:	2027      	movs	r0, #39	@ 0x27
 800071c:	f7ff fdb6 	bl	800028c <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8000720:	20f2      	movs	r0, #242	@ 0xf2
 8000722:	f7ff fd7d 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fdb0 	bl	800028c <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f7ff fd77 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fdaa 	bl	800028c <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8000738:	20e0      	movs	r0, #224	@ 0xe0
 800073a:	f7ff fd71 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 800073e:	200f      	movs	r0, #15
 8000740:	f7ff fda4 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8000744:	2031      	movs	r0, #49	@ 0x31
 8000746:	f7ff fda1 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 800074a:	202b      	movs	r0, #43	@ 0x2b
 800074c:	f7ff fd9e 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8000750:	200c      	movs	r0, #12
 8000752:	f7ff fd9b 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000756:	200e      	movs	r0, #14
 8000758:	f7ff fd98 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800075c:	2008      	movs	r0, #8
 800075e:	f7ff fd95 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8000762:	204e      	movs	r0, #78	@ 0x4e
 8000764:	f7ff fd92 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8000768:	20f1      	movs	r0, #241	@ 0xf1
 800076a:	f7ff fd8f 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 800076e:	2037      	movs	r0, #55	@ 0x37
 8000770:	f7ff fd8c 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8000774:	2007      	movs	r0, #7
 8000776:	f7ff fd89 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 800077a:	2010      	movs	r0, #16
 800077c:	f7ff fd86 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8000780:	2003      	movs	r0, #3
 8000782:	f7ff fd83 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8000786:	200e      	movs	r0, #14
 8000788:	f7ff fd80 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 800078c:	2009      	movs	r0, #9
 800078e:	f7ff fd7d 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fd7a 	bl	800028c <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8000798:	20e1      	movs	r0, #225	@ 0xe1
 800079a:	f7ff fd41 	bl	8000220 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f7ff fd74 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80007a4:	200e      	movs	r0, #14
 80007a6:	f7ff fd71 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80007aa:	2014      	movs	r0, #20
 80007ac:	f7ff fd6e 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f7ff fd6b 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80007b6:	2011      	movs	r0, #17
 80007b8:	f7ff fd68 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80007bc:	2007      	movs	r0, #7
 80007be:	f7ff fd65 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80007c2:	2031      	movs	r0, #49	@ 0x31
 80007c4:	f7ff fd62 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80007c8:	20c1      	movs	r0, #193	@ 0xc1
 80007ca:	f7ff fd5f 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80007ce:	2048      	movs	r0, #72	@ 0x48
 80007d0:	f7ff fd5c 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80007d4:	2008      	movs	r0, #8
 80007d6:	f7ff fd59 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80007da:	200f      	movs	r0, #15
 80007dc:	f7ff fd56 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80007e0:	200c      	movs	r0, #12
 80007e2:	f7ff fd53 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80007e6:	2031      	movs	r0, #49	@ 0x31
 80007e8:	f7ff fd50 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 80007ec:	2036      	movs	r0, #54	@ 0x36
 80007ee:	f7ff fd4d 	bl	800028c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f7ff fd4a 	bl	800028c <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 80007f8:	2011      	movs	r0, #17
 80007fa:	f7ff fd11 	bl	8000220 <ILI9341_Write_Command>
	HAL_Delay(120);
 80007fe:	2078      	movs	r0, #120	@ 0x78
 8000800:	f001 fd54 	bl	80022ac <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29); 
 8000804:	2029      	movs	r0, #41	@ 0x29
 8000806:	f7ff fd0b 	bl	8000220 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fe7c 	bl	8000508 <ILI9341_Set_Rotation>
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	0002      	movs	r2, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	1dbb      	adds	r3, r7, #6
 8000824:	801a      	strh	r2, [r3, #0]
	DISP_DC_DATA;
 8000826:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <ILI9341_Draw_Colour_Burst+0x98>)
 8000828:	2201      	movs	r2, #1
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	0018      	movs	r0, r3
 800082e:	f001 ff85 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000832:	2380      	movs	r3, #128	@ 0x80
 8000834:	0059      	lsls	r1, r3, #1
 8000836:	2390      	movs	r3, #144	@ 0x90
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2200      	movs	r2, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f001 ff7d 	bl	800273c <HAL_GPIO_WritePin>

	while(Size > 0)
 8000842:	e01a      	b.n	800087a <ILI9341_Draw_Colour_Burst+0x62>
	{
		*(__IO uint8_t*)&(DISP_SPI->DR) = (Colour >> 8);
 8000844:	1dbb      	adds	r3, r7, #6
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	b29a      	uxth	r2, r3
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <ILI9341_Draw_Colour_Burst+0x9c>)
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	701a      	strb	r2, [r3, #0]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <ILI9341_Draw_Colour_Burst+0xa0>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	2202      	movs	r2, #2
 800085a:	4013      	ands	r3, r2
 800085c:	d0fa      	beq.n	8000854 <ILI9341_Draw_Colour_Burst+0x3c>
		*(__IO uint8_t*)&(DISP_SPI->DR) = Colour;
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <ILI9341_Draw_Colour_Burst+0x9c>)
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	7013      	strb	r3, [r2, #0]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <ILI9341_Draw_Colour_Burst+0xa0>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	2202      	movs	r2, #2
 8000870:	4013      	ands	r3, r2
 8000872:	d0fa      	beq.n	800086a <ILI9341_Draw_Colour_Burst+0x52>
		Size--;
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1e1      	bne.n	8000844 <ILI9341_Draw_Colour_Burst+0x2c>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <ILI9341_Draw_Colour_Burst+0xa0>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2202      	movs	r2, #2
 8000888:	4013      	ands	r3, r2
 800088a:	d0fa      	beq.n	8000882 <ILI9341_Draw_Colour_Burst+0x6a>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <ILI9341_Draw_Colour_Burst+0xa0>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	4013      	ands	r3, r2
 8000896:	d1fa      	bne.n	800088e <ILI9341_Draw_Colour_Burst+0x76>
	DISP_CS_UNSELECT;
 8000898:	2380      	movs	r3, #128	@ 0x80
 800089a:	0059      	lsls	r1, r3, #1
 800089c:	2390      	movs	r3, #144	@ 0x90
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	2201      	movs	r2, #1
 80008a2:	0018      	movs	r0, r3
 80008a4:	f001 ff4a 	bl	800273c <HAL_GPIO_WritePin>
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	48000800 	.word	0x48000800
 80008b4:	4001300c 	.word	0x4001300c
 80008b8:	40013000 	.word	0x40013000

080008bc <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	0002      	movs	r2, r0
 80008c4:	1dbb      	adds	r3, r7, #6
 80008c6:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80008c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <ILI9341_Fill_Screen+0x48>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <ILI9341_Fill_Screen+0x4c>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fd0e 	bl	80002f8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <ILI9341_Fill_Screen+0x48>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	001a      	movs	r2, r3
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <ILI9341_Fill_Screen+0x4c>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4353      	muls	r3, r2
 80008ec:	001a      	movs	r2, r3
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff8f 	bl	8000818 <ILI9341_Draw_Colour_Burst>
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	20000002 	.word	0x20000002
 8000908:	20000000 	.word	0x20000000

0800090c <ILI9341_Draw_Pixel>:

//DRAW PIXEL AT XY POSITION WITH SELECTED COLOUR
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	0004      	movs	r4, r0
 8000914:	0008      	movs	r0, r1
 8000916:	0011      	movs	r1, r2
 8000918:	1dbb      	adds	r3, r7, #6
 800091a:	1c22      	adds	r2, r4, #0
 800091c:	801a      	strh	r2, [r3, #0]
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	1c02      	adds	r2, r0, #0
 8000922:	801a      	strh	r2, [r3, #0]
 8000924:	1cbb      	adds	r3, r7, #2
 8000926:	1c0a      	adds	r2, r1, #0
 8000928:	801a      	strh	r2, [r3, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 800092a:	4b82      	ldr	r3, [pc, #520]	@ (8000b34 <ILI9341_Draw_Pixel+0x228>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b29b      	uxth	r3, r3
 8000930:	1dba      	adds	r2, r7, #6
 8000932:	8812      	ldrh	r2, [r2, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d300      	bcc.n	800093a <ILI9341_Draw_Pixel+0x2e>
 8000938:	e0f7      	b.n	8000b2a <ILI9341_Draw_Pixel+0x21e>
 800093a:	4b7f      	ldr	r3, [pc, #508]	@ (8000b38 <ILI9341_Draw_Pixel+0x22c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b29b      	uxth	r3, r3
 8000940:	1d3a      	adds	r2, r7, #4
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d300      	bcc.n	800094a <ILI9341_Draw_Pixel+0x3e>
 8000948:	e0ef      	b.n	8000b2a <ILI9341_Draw_Pixel+0x21e>

	//ADDRESS
	DISP_DC_CMD;
 800094a:	4b7c      	ldr	r3, [pc, #496]	@ (8000b3c <ILI9341_Draw_Pixel+0x230>)
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	@ 0x80
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fef3 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8000956:	2380      	movs	r3, #128	@ 0x80
 8000958:	0059      	lsls	r1, r3, #1
 800095a:	2390      	movs	r3, #144	@ 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	2200      	movs	r2, #0
 8000960:	0018      	movs	r0, r3
 8000962:	f001 feeb 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x2A;
 8000966:	4b76      	ldr	r3, [pc, #472]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000968:	222a      	movs	r2, #42	@ 0x2a
 800096a:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800096c:	46c0      	nop			@ (mov r8, r8)
 800096e:	4b75      	ldr	r3, [pc, #468]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2202      	movs	r2, #2
 8000974:	4013      	ands	r3, r2
 8000976:	d0fa      	beq.n	800096e <ILI9341_Draw_Pixel+0x62>
	while(DISP_SPI->SR & SPI_SR_BSY);////////////
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	4b72      	ldr	r3, [pc, #456]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	4013      	ands	r3, r2
 8000982:	d1fa      	bne.n	800097a <ILI9341_Draw_Pixel+0x6e>

	DISP_DC_DATA;
 8000984:	4b6d      	ldr	r3, [pc, #436]	@ (8000b3c <ILI9341_Draw_Pixel+0x230>)
 8000986:	2201      	movs	r2, #1
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	0018      	movs	r0, r3
 800098c:	f001 fed6 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (X >> 8);
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b69      	ldr	r3, [pc, #420]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 800099a:	b2d2      	uxtb	r2, r2
 800099c:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	4b68      	ldr	r3, [pc, #416]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	2202      	movs	r2, #2
 80009a6:	4013      	ands	r3, r2
 80009a8:	d0fa      	beq.n	80009a0 <ILI9341_Draw_Pixel+0x94>
	*(__IO uint8_t*)&(DISP_SPI->DR) = X;
 80009aa:	4a65      	ldr	r2, [pc, #404]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 80009ac:	1dbb      	adds	r3, r7, #6
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	4b63      	ldr	r3, [pc, #396]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2202      	movs	r2, #2
 80009bc:	4013      	ands	r3, r2
 80009be:	d0fa      	beq.n	80009b6 <ILI9341_Draw_Pixel+0xaa>
	*(__IO uint8_t*)&(DISP_SPI->DR) = ((X + 1) >> 8);
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	121a      	asrs	r2, r3, #8
 80009c8:	4b5d      	ldr	r3, [pc, #372]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	2202      	movs	r2, #2
 80009d6:	4013      	ands	r3, r2
 80009d8:	d0fa      	beq.n	80009d0 <ILI9341_Draw_Pixel+0xc4>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (X + 1);
 80009da:	1dbb      	adds	r3, r7, #6
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4a57      	ldr	r2, [pc, #348]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 80009e2:	3301      	adds	r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	4b56      	ldr	r3, [pc, #344]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2202      	movs	r2, #2
 80009f0:	4013      	ands	r3, r2
 80009f2:	d0fa      	beq.n	80009ea <ILI9341_Draw_Pixel+0xde>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	4b53      	ldr	r3, [pc, #332]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	2280      	movs	r2, #128	@ 0x80
 80009fc:	4013      	ands	r3, r2
 80009fe:	d1fa      	bne.n	80009f6 <ILI9341_Draw_Pixel+0xea>

	//ADDRESS
	DISP_DC_CMD;
 8000a00:	4b4e      	ldr	r3, [pc, #312]	@ (8000b3c <ILI9341_Draw_Pixel+0x230>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fe98 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x2B;
 8000a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000a0e:	222b      	movs	r2, #43	@ 0x2b
 8000a10:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	4b4b      	ldr	r3, [pc, #300]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	2202      	movs	r2, #2
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	d0fa      	beq.n	8000a14 <ILI9341_Draw_Pixel+0x108>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	4b48      	ldr	r3, [pc, #288]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	2280      	movs	r2, #128	@ 0x80
 8000a26:	4013      	ands	r3, r2
 8000a28:	d1fa      	bne.n	8000a20 <ILI9341_Draw_Pixel+0x114>

	DISP_DC_DATA;
 8000a2a:	4b44      	ldr	r3, [pc, #272]	@ (8000b3c <ILI9341_Draw_Pixel+0x230>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 fe83 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (Y >> 8);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	0a1b      	lsrs	r3, r3, #8
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b40      	ldr	r3, [pc, #256]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	4b3f      	ldr	r3, [pc, #252]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	d0fa      	beq.n	8000a46 <ILI9341_Draw_Pixel+0x13a>
	*(__IO uint8_t*)&(DISP_SPI->DR) = Y;
 8000a50:	4a3b      	ldr	r2, [pc, #236]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	4b39      	ldr	r3, [pc, #228]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2202      	movs	r2, #2
 8000a62:	4013      	ands	r3, r2
 8000a64:	d0fa      	beq.n	8000a5c <ILI9341_Draw_Pixel+0x150>
	*(__IO uint8_t*)&(DISP_SPI->DR) = ((Y + 1) >> 8);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	121a      	asrs	r2, r3, #8
 8000a6e:	4b34      	ldr	r3, [pc, #208]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	4b33      	ldr	r3, [pc, #204]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d0fa      	beq.n	8000a76 <ILI9341_Draw_Pixel+0x16a>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (Y + 1);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4a2e      	ldr	r2, [pc, #184]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	2202      	movs	r2, #2
 8000a96:	4013      	ands	r3, r2
 8000a98:	d0fa      	beq.n	8000a90 <ILI9341_Draw_Pixel+0x184>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2280      	movs	r2, #128	@ 0x80
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d1fa      	bne.n	8000a9c <ILI9341_Draw_Pixel+0x190>

	//ADDRESS
	DISP_DC_CMD;
 8000aa6:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <ILI9341_Draw_Pixel+0x230>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2180      	movs	r1, #128	@ 0x80
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 fe45 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = 0x2C;
 8000ab2:	4b23      	ldr	r3, [pc, #140]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000ab4:	222c      	movs	r2, #44	@ 0x2c
 8000ab6:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	d0fa      	beq.n	8000aba <ILI9341_Draw_Pixel+0x1ae>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2280      	movs	r2, #128	@ 0x80
 8000acc:	4013      	ands	r3, r2
 8000ace:	d1fa      	bne.n	8000ac6 <ILI9341_Draw_Pixel+0x1ba>

	DISP_DC_DATA;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b3c <ILI9341_Draw_Pixel+0x230>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2180      	movs	r1, #128	@ 0x80
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 fe30 	bl	800273c <HAL_GPIO_WritePin>
	*(__IO uint8_t*)&(DISP_SPI->DR) = (Colour >> 8);
 8000adc:	1cbb      	adds	r3, r7, #2
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	701a      	strb	r2, [r3, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2202      	movs	r2, #2
 8000af2:	4013      	ands	r3, r2
 8000af4:	d0fa      	beq.n	8000aec <ILI9341_Draw_Pixel+0x1e0>
	*(__IO uint8_t*)&(DISP_SPI->DR) = Colour;
 8000af6:	4a12      	ldr	r2, [pc, #72]	@ (8000b40 <ILI9341_Draw_Pixel+0x234>)
 8000af8:	1cbb      	adds	r3, r7, #2
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	7013      	strb	r3, [r2, #0]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2202      	movs	r2, #2
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d0fa      	beq.n	8000b02 <ILI9341_Draw_Pixel+0x1f6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <ILI9341_Draw_Pixel+0x238>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2280      	movs	r2, #128	@ 0x80
 8000b14:	4013      	ands	r3, r2
 8000b16:	d1fa      	bne.n	8000b0e <ILI9341_Draw_Pixel+0x202>

	DISP_CS_UNSELECT;
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	0059      	lsls	r1, r3, #1
 8000b1c:	2390      	movs	r3, #144	@ 0x90
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2201      	movs	r2, #1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 fe0a 	bl	800273c <HAL_GPIO_WritePin>
 8000b28:	e000      	b.n	8000b2c <ILI9341_Draw_Pixel+0x220>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000b2a:	46c0      	nop			@ (mov r8, r8)
}
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b003      	add	sp, #12
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	20000002 	.word	0x20000002
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	4001300c 	.word	0x4001300c
 8000b44:	40013000 	.word	0x40013000

08000b48 <ILI9341_Draw_Rectangle>:

//DRAW RECTANGLE OF SET SIZE AND HEIGTH AT X and Y POSITION WITH CUSTOM COLOUR
void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0005      	movs	r5, r0
 8000b50:	000c      	movs	r4, r1
 8000b52:	0010      	movs	r0, r2
 8000b54:	0019      	movs	r1, r3
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	1c2a      	adds	r2, r5, #0
 8000b5a:	801a      	strh	r2, [r3, #0]
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	1c22      	adds	r2, r4, #0
 8000b60:	801a      	strh	r2, [r3, #0]
 8000b62:	1cbb      	adds	r3, r7, #2
 8000b64:	1c02      	adds	r2, r0, #0
 8000b66:	801a      	strh	r2, [r3, #0]
 8000b68:	003b      	movs	r3, r7
 8000b6a:	1c0a      	adds	r2, r1, #0
 8000b6c:	801a      	strh	r2, [r3, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <ILI9341_Draw_Rectangle+0xe0>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	1dba      	adds	r2, r7, #6
 8000b76:	8812      	ldrh	r2, [r2, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d250      	bcs.n	8000c1e <ILI9341_Draw_Rectangle+0xd6>
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c2c <ILI9341_Draw_Rectangle+0xe4>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	1d3a      	adds	r2, r7, #4
 8000b84:	8812      	ldrh	r2, [r2, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d249      	bcs.n	8000c1e <ILI9341_Draw_Rectangle+0xd6>

	if((X + Width - 1) >= LCD_WIDTH)
 8000b8a:	1dbb      	adds	r3, r7, #6
 8000b8c:	881a      	ldrh	r2, [r3, #0]
 8000b8e:	1cbb      	adds	r3, r7, #2
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	18d3      	adds	r3, r2, r3
 8000b94:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <ILI9341_Draw_Rectangle+0xe0>)
 8000b96:	8812      	ldrh	r2, [r2, #0]
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	dd07      	ble.n	8000bae <ILI9341_Draw_Rectangle+0x66>
	{
		Width = LCD_WIDTH - X;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <ILI9341_Draw_Rectangle+0xe0>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	1cbb      	adds	r3, r7, #2
 8000ba6:	1dba      	adds	r2, r7, #6
 8000ba8:	8812      	ldrh	r2, [r2, #0]
 8000baa:	1a8a      	subs	r2, r1, r2
 8000bac:	801a      	strh	r2, [r3, #0]
	}

	if((Y + Height - 1) >= LCD_HEIGHT)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	881a      	ldrh	r2, [r3, #0]
 8000bb2:	003b      	movs	r3, r7
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c2c <ILI9341_Draw_Rectangle+0xe4>)
 8000bba:	8812      	ldrh	r2, [r2, #0]
 8000bbc:	b292      	uxth	r2, r2
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	dd07      	ble.n	8000bd2 <ILI9341_Draw_Rectangle+0x8a>
	{
		Height = LCD_HEIGHT - Y;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <ILI9341_Draw_Rectangle+0xe4>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b299      	uxth	r1, r3
 8000bc8:	003b      	movs	r3, r7
 8000bca:	1d3a      	adds	r2, r7, #4
 8000bcc:	8812      	ldrh	r2, [r2, #0]
 8000bce:	1a8a      	subs	r2, r1, r2
 8000bd0:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 8000bd2:	1dba      	adds	r2, r7, #6
 8000bd4:	1cbb      	adds	r3, r7, #2
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29c      	uxth	r4, r3
 8000be2:	1d3a      	adds	r2, r7, #4
 8000be4:	003b      	movs	r3, r7
 8000be6:	8812      	ldrh	r2, [r2, #0]
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	8819      	ldrh	r1, [r3, #0]
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	8818      	ldrh	r0, [r3, #0]
 8000bfa:	0013      	movs	r3, r2
 8000bfc:	0022      	movs	r2, r4
 8000bfe:	f7ff fb7b 	bl	80002f8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 8000c02:	003b      	movs	r3, r7
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	1cba      	adds	r2, r7, #2
 8000c08:	8812      	ldrh	r2, [r2, #0]
 8000c0a:	4353      	muls	r3, r2
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2318      	movs	r3, #24
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	0011      	movs	r1, r2
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fdfe 	bl	8000818 <ILI9341_Draw_Colour_Burst>
 8000c1c:	e000      	b.n	8000c20 <ILI9341_Draw_Rectangle+0xd8>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000c1e:	46c0      	nop			@ (mov r8, r8)
}
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bdb0      	pop	{r4, r5, r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	20000002 	.word	0x20000002
 8000c2c:	20000000 	.word	0x20000000

08000c30 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	0005      	movs	r5, r0
 8000c38:	000c      	movs	r4, r1
 8000c3a:	0010      	movs	r0, r2
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	1dbb      	adds	r3, r7, #6
 8000c40:	1c2a      	adds	r2, r5, #0
 8000c42:	801a      	strh	r2, [r3, #0]
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	1c22      	adds	r2, r4, #0
 8000c48:	801a      	strh	r2, [r3, #0]
 8000c4a:	1cbb      	adds	r3, r7, #2
 8000c4c:	1c02      	adds	r2, r0, #0
 8000c4e:	801a      	strh	r2, [r3, #0]
 8000c50:	003b      	movs	r3, r7
 8000c52:	1c0a      	adds	r2, r1, #0
 8000c54:	801a      	strh	r2, [r3, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <ILI9341_Draw_Horizontal_Line+0xa4>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	1dba      	adds	r2, r7, #6
 8000c5e:	8812      	ldrh	r2, [r2, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d232      	bcs.n	8000cca <ILI9341_Draw_Horizontal_Line+0x9a>
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <ILI9341_Draw_Horizontal_Line+0xa8>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	1d3a      	adds	r2, r7, #4
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d22b      	bcs.n	8000cca <ILI9341_Draw_Horizontal_Line+0x9a>

	if((X + Width - 1) >= LCD_WIDTH)
 8000c72:	1dbb      	adds	r3, r7, #6
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	1cbb      	adds	r3, r7, #2
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <ILI9341_Draw_Horizontal_Line+0xa4>)
 8000c7e:	8812      	ldrh	r2, [r2, #0]
 8000c80:	b292      	uxth	r2, r2
 8000c82:	4293      	cmp	r3, r2
 8000c84:	dd07      	ble.n	8000c96 <ILI9341_Draw_Horizontal_Line+0x66>
	{
		Width = LCD_WIDTH - X;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <ILI9341_Draw_Horizontal_Line+0xa4>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	1cbb      	adds	r3, r7, #2
 8000c8e:	1dba      	adds	r2, r7, #6
 8000c90:	8812      	ldrh	r2, [r2, #0]
 8000c92:	1a8a      	subs	r2, r1, r2
 8000c94:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Address(X, Y, X + Width - 1, Y);
 8000c96:	1dba      	adds	r2, r7, #6
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	8812      	ldrh	r2, [r2, #0]
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	18d3      	adds	r3, r2, r3
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	881c      	ldrh	r4, [r3, #0]
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	8819      	ldrh	r1, [r3, #0]
 8000cae:	1dbb      	adds	r3, r7, #6
 8000cb0:	8818      	ldrh	r0, [r3, #0]
 8000cb2:	0023      	movs	r3, r4
 8000cb4:	f7ff fb20 	bl	80002f8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Width);
 8000cb8:	1cbb      	adds	r3, r7, #2
 8000cba:	881a      	ldrh	r2, [r3, #0]
 8000cbc:	003b      	movs	r3, r7
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fda8 	bl	8000818 <ILI9341_Draw_Colour_Burst>
 8000cc8:	e000      	b.n	8000ccc <ILI9341_Draw_Horizontal_Line+0x9c>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000cca:	46c0      	nop			@ (mov r8, r8)
}
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000002 	.word	0x20000002
 8000cd8:	20000000 	.word	0x20000000

08000cdc <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8000cdc:	b5b0      	push	{r4, r5, r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	000c      	movs	r4, r1
 8000ce6:	0010      	movs	r0, r2
 8000ce8:	0019      	movs	r1, r3
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	1c2a      	adds	r2, r5, #0
 8000cee:	801a      	strh	r2, [r3, #0]
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	1c22      	adds	r2, r4, #0
 8000cf4:	801a      	strh	r2, [r3, #0]
 8000cf6:	1cbb      	adds	r3, r7, #2
 8000cf8:	1c02      	adds	r2, r0, #0
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	1c0a      	adds	r2, r1, #0
 8000d00:	801a      	strh	r2, [r3, #0]
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <ILI9341_Draw_Vertical_Line+0xa4>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	1dba      	adds	r2, r7, #6
 8000d0a:	8812      	ldrh	r2, [r2, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d232      	bcs.n	8000d76 <ILI9341_Draw_Vertical_Line+0x9a>
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <ILI9341_Draw_Vertical_Line+0xa8>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	1d3a      	adds	r2, r7, #4
 8000d18:	8812      	ldrh	r2, [r2, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d22b      	bcs.n	8000d76 <ILI9341_Draw_Vertical_Line+0x9a>

	if((Y + Height - 1) >= LCD_HEIGHT)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	881a      	ldrh	r2, [r3, #0]
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <ILI9341_Draw_Vertical_Line+0xa8>)
 8000d2a:	8812      	ldrh	r2, [r2, #0]
 8000d2c:	b292      	uxth	r2, r2
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	dd07      	ble.n	8000d42 <ILI9341_Draw_Vertical_Line+0x66>
	{
		Height = LCD_HEIGHT - Y;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <ILI9341_Draw_Vertical_Line+0xa8>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b299      	uxth	r1, r3
 8000d38:	1cbb      	adds	r3, r7, #2
 8000d3a:	1d3a      	adds	r2, r7, #4
 8000d3c:	8812      	ldrh	r2, [r2, #0]
 8000d3e:	1a8a      	subs	r2, r1, r2
 8000d40:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Set_Address(X, Y, X, Y + Height - 1);
 8000d42:	1d3a      	adds	r2, r7, #4
 8000d44:	1cbb      	adds	r3, r7, #2
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	18d3      	adds	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	b29c      	uxth	r4, r3
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	8819      	ldrh	r1, [r3, #0]
 8000d5a:	1dbb      	adds	r3, r7, #6
 8000d5c:	8818      	ldrh	r0, [r3, #0]
 8000d5e:	0023      	movs	r3, r4
 8000d60:	f7ff faca 	bl	80002f8 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height);
 8000d64:	1cbb      	adds	r3, r7, #2
 8000d66:	881a      	ldrh	r2, [r3, #0]
 8000d68:	003b      	movs	r3, r7
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fd52 	bl	8000818 <ILI9341_Draw_Colour_Burst>
 8000d74:	e000      	b.n	8000d78 <ILI9341_Draw_Vertical_Line+0x9c>
	if((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT)) return;
 8000d76:	46c0      	nop			@ (mov r8, r8)
}
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	20000002 	.word	0x20000002
 8000d84:	20000000 	.word	0x20000000

08000d88 <ILI9341_Draw_Hollow_Circle>:

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	0005      	movs	r5, r0
 8000d90:	000c      	movs	r4, r1
 8000d92:	0010      	movs	r0, r2
 8000d94:	0019      	movs	r1, r3
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	1c2a      	adds	r2, r5, #0
 8000d9a:	801a      	strh	r2, [r3, #0]
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	1c22      	adds	r2, r4, #0
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	1cbb      	adds	r3, r7, #2
 8000da4:	1c02      	adds	r2, r0, #0
 8000da6:	801a      	strh	r2, [r3, #0]
 8000da8:	003b      	movs	r3, r7
 8000daa:	1c0a      	adds	r2, r1, #0
 8000dac:	801a      	strh	r2, [r3, #0]
	int x = Radius - 1;
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8000dc2:	1cbb      	adds	r3, r7, #2
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 8000dce:	e0a6      	b.n	8000f1e <ILI9341_Draw_Hollow_Circle+0x196>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	1dbb      	adds	r3, r7, #6
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	18d3      	adds	r3, r2, r3
 8000dda:	b298      	uxth	r0, r3
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	18d3      	adds	r3, r2, r3
 8000de6:	b299      	uxth	r1, r3
 8000de8:	003b      	movs	r3, r7
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	001a      	movs	r2, r3
 8000dee:	f7ff fd8d 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	1dbb      	adds	r3, r7, #6
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	18d3      	adds	r3, r2, r3
 8000dfc:	b298      	uxth	r0, r3
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	18d3      	adds	r3, r2, r3
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	001a      	movs	r2, r3
 8000e10:	f7ff fd7c 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	1dba      	adds	r2, r7, #6
 8000e1a:	8812      	ldrh	r2, [r2, #0]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	b298      	uxth	r0, r3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	b299      	uxth	r1, r3
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	001a      	movs	r2, r3
 8000e32:	f7ff fd6b 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	1dba      	adds	r2, r7, #6
 8000e3c:	8812      	ldrh	r2, [r2, #0]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	b298      	uxth	r0, r3
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	18d3      	adds	r3, r2, r3
 8000e4c:	b299      	uxth	r1, r3
 8000e4e:	003b      	movs	r3, r7
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	001a      	movs	r2, r3
 8000e54:	f7ff fd5a 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	1dba      	adds	r2, r7, #6
 8000e5e:	8812      	ldrh	r2, [r2, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	b298      	uxth	r0, r3
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	1d3a      	adds	r2, r7, #4
 8000e6a:	8812      	ldrh	r2, [r2, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	b299      	uxth	r1, r3
 8000e70:	003b      	movs	r3, r7
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	001a      	movs	r2, r3
 8000e76:	f7ff fd49 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	1dba      	adds	r2, r7, #6
 8000e80:	8812      	ldrh	r2, [r2, #0]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	b298      	uxth	r0, r3
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	1d3a      	adds	r2, r7, #4
 8000e8c:	8812      	ldrh	r2, [r2, #0]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	b299      	uxth	r1, r3
 8000e92:	003b      	movs	r3, r7
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	001a      	movs	r2, r3
 8000e98:	f7ff fd38 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	1dbb      	adds	r3, r7, #6
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	b298      	uxth	r0, r3
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	8812      	ldrh	r2, [r2, #0]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	b299      	uxth	r1, r3
 8000eb4:	003b      	movs	r3, r7
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	001a      	movs	r2, r3
 8000eba:	f7ff fd27 	bl	800090c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	1dbb      	adds	r3, r7, #6
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	18d3      	adds	r3, r2, r3
 8000ec8:	b298      	uxth	r0, r3
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	1d3a      	adds	r2, r7, #4
 8000ed0:	8812      	ldrh	r2, [r2, #0]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	001a      	movs	r2, r3
 8000edc:	f7ff fd16 	bl	800090c <ILI9341_Draw_Pixel>

        if (err <= 0)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dc09      	bgt.n	8000efa <ILI9341_Draw_Hollow_Circle+0x172>
        {
            y++;
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
            err += dy;
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
            dy += 2;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
        }

        if (err > 0)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dd0e      	ble.n	8000f1e <ILI9341_Draw_Hollow_Circle+0x196>
        {
            x--;
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 8000f0c:	1cbb      	adds	r3, r7, #2
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	425b      	negs	r3, r3
 8000f12:	005a      	lsls	r2, r3, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	18d3      	adds	r3, r2, r3
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	18d3      	adds	r3, r2, r3
 8000f1c:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 8000f1e:	69fa      	ldr	r2, [r7, #28]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	db00      	blt.n	8000f28 <ILI9341_Draw_Hollow_Circle+0x1a0>
 8000f26:	e753      	b.n	8000dd0 <ILI9341_Draw_Hollow_Circle+0x48>
        }
    }
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b008      	add	sp, #32
 8000f30:	bdb0      	pop	{r4, r5, r7, pc}

08000f32 <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8000f32:	b5b0      	push	{r4, r5, r7, lr}
 8000f34:	b08a      	sub	sp, #40	@ 0x28
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	0005      	movs	r5, r0
 8000f3a:	000c      	movs	r4, r1
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	0019      	movs	r1, r3
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	1c2a      	adds	r2, r5, #0
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	1c22      	adds	r2, r4, #0
 8000f4a:	801a      	strh	r2, [r3, #0]
 8000f4c:	1cbb      	adds	r3, r7, #2
 8000f4e:	1c02      	adds	r2, r0, #0
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	003b      	movs	r3, r7
 8000f54:	1c0a      	adds	r2, r1, #0
 8000f56:	801a      	strh	r2, [r3, #0]
	int x = Radius;
 8000f58:	1cbb      	adds	r3, r7, #2
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
	int y = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8000f62:	1cbb      	adds	r3, r7, #2
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2201      	movs	r2, #1
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
	
	while (x >= y)
 8000f76:	e06d      	b.n	8001054 <ILI9341_Draw_Filled_Circle+0x122>
	{
		for (int i = X - x; i <= X + x; i++)
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	881a      	ldrh	r2, [r3, #0]
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	e01c      	b.n	8000fbe <ILI9341_Draw_Filled_Circle+0x8c>
		{
			ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	b298      	uxth	r0, r3
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	18d3      	adds	r3, r2, r3
 8000f92:	b299      	uxth	r1, r3
 8000f94:	003b      	movs	r3, r7
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	001a      	movs	r2, r3
 8000f9a:	f7ff fcb7 	bl	800090c <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	b298      	uxth	r0, r3
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	8812      	ldrh	r2, [r2, #0]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b299      	uxth	r1, r3
 8000fae:	003b      	movs	r3, r7
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	f7ff fcaa 	bl	800090c <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	1dbb      	adds	r3, r7, #6
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dddb      	ble.n	8000f84 <ILI9341_Draw_Filled_Circle+0x52>
		}

		for (int i = X - y; i <= X + y; i++)
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	881a      	ldrh	r2, [r3, #0]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e01c      	b.n	8001012 <ILI9341_Draw_Filled_Circle+0xe0>
		{
			ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	b298      	uxth	r0, r3
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	18d3      	adds	r3, r2, r3
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	003b      	movs	r3, r7
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	001a      	movs	r2, r3
 8000fee:	f7ff fc8d 	bl	800090c <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b298      	uxth	r0, r3
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	8812      	ldrh	r2, [r2, #0]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	b299      	uxth	r1, r3
 8001002:	003b      	movs	r3, r7
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	001a      	movs	r2, r3
 8001008:	f7ff fc80 	bl	800090c <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	881a      	ldrh	r2, [r3, #0]
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	dddb      	ble.n	8000fd8 <ILI9341_Draw_Filled_Circle+0xa6>
		}

		y++;
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	3301      	adds	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	18d3      	adds	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
		yChange += 2;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3302      	adds	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]

		if(((radiusError << 1) + xChange) > 0)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005a      	lsls	r2, r3, #1
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	dd09      	ble.n	8001054 <ILI9341_Draw_Filled_Circle+0x122>
		{
			x--;
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	3b01      	subs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
			radiusError += xChange;
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	18d3      	adds	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
			xChange += 2;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3302      	adds	r3, #2
 8001052:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8001054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	429a      	cmp	r2, r3
 800105a:	da8d      	bge.n	8000f78 <ILI9341_Draw_Filled_Circle+0x46>
		}
	}
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b00a      	add	sp, #40	@ 0x28
 8001064:	bdb0      	pop	{r4, r5, r7, pc}

08001066 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001066:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001068:	b087      	sub	sp, #28
 800106a:	af00      	add	r7, sp, #0
 800106c:	0005      	movs	r5, r0
 800106e:	000c      	movs	r4, r1
 8001070:	0010      	movs	r0, r2
 8001072:	0019      	movs	r1, r3
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	1c2a      	adds	r2, r5, #0
 8001078:	801a      	strh	r2, [r3, #0]
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	1c22      	adds	r2, r4, #0
 800107e:	801a      	strh	r2, [r3, #0]
 8001080:	1cbb      	adds	r3, r7, #2
 8001082:	1c02      	adds	r2, r0, #0
 8001084:	801a      	strh	r2, [r3, #0]
 8001086:	003b      	movs	r3, r7
 8001088:	1c0a      	adds	r2, r1, #0
 800108a:	801a      	strh	r2, [r3, #0]
	uint16_t 	X_length = 0;
 800108c:	2316      	movs	r3, #22
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	2200      	movs	r2, #0
 8001092:	801a      	strh	r2, [r3, #0]
	uint16_t 	Y_length = 0;
 8001094:	2314      	movs	r3, #20
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	2200      	movs	r2, #0
 800109a:	801a      	strh	r2, [r3, #0]
	uint8_t		Negative_X = 0;
 800109c:	2113      	movs	r1, #19
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
	uint8_t 	Negative_Y = 0;
 80010a4:	2312      	movs	r3, #18
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
	int32_t 	Calc_Negative = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80010b0:	1cbb      	adds	r3, r7, #2
 80010b2:	881a      	ldrh	r2, [r3, #0]
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	da02      	bge.n	80010c8 <ILI9341_Draw_Hollow_Rectangle_Coord+0x62>
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
	Calc_Negative = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 80010cc:	003b      	movs	r3, r7
 80010ce:	881a      	ldrh	r2, [r3, #0]
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da03      	bge.n	80010e6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x80>
 80010de:	2312      	movs	r3, #18
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80010e6:	2313      	movs	r3, #19
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d108      	bne.n	8001102 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9c>
	{
		X_length = X1 - X0;		
 80010f0:	2316      	movs	r3, #22
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	1cb9      	adds	r1, r7, #2
 80010f6:	1dba      	adds	r2, r7, #6
 80010f8:	8809      	ldrh	r1, [r1, #0]
 80010fa:	8812      	ldrh	r2, [r2, #0]
 80010fc:	1a8a      	subs	r2, r1, r2
 80010fe:	801a      	strh	r2, [r3, #0]
 8001100:	e007      	b.n	8001112 <ILI9341_Draw_Hollow_Rectangle_Coord+0xac>
	}
	else
	{
		X_length = X0 - X1;		
 8001102:	2316      	movs	r3, #22
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	1db9      	adds	r1, r7, #6
 8001108:	1cba      	adds	r2, r7, #2
 800110a:	8809      	ldrh	r1, [r1, #0]
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	1a8a      	subs	r2, r1, r2
 8001110:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8001112:	2528      	movs	r5, #40	@ 0x28
 8001114:	2308      	movs	r3, #8
 8001116:	18ea      	adds	r2, r5, r3
 8001118:	19d3      	adds	r3, r2, r7
 800111a:	881c      	ldrh	r4, [r3, #0]
 800111c:	2616      	movs	r6, #22
 800111e:	19bb      	adds	r3, r7, r6
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	8819      	ldrh	r1, [r3, #0]
 8001126:	1dbb      	adds	r3, r7, #6
 8001128:	8818      	ldrh	r0, [r3, #0]
 800112a:	0023      	movs	r3, r4
 800112c:	f7ff fd80 	bl	8000c30 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8001130:	2308      	movs	r3, #8
 8001132:	18eb      	adds	r3, r5, r3
 8001134:	19db      	adds	r3, r3, r7
 8001136:	881c      	ldrh	r4, [r3, #0]
 8001138:	19bb      	adds	r3, r7, r6
 800113a:	881a      	ldrh	r2, [r3, #0]
 800113c:	003b      	movs	r3, r7
 800113e:	8819      	ldrh	r1, [r3, #0]
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	8818      	ldrh	r0, [r3, #0]
 8001144:	0023      	movs	r3, r4
 8001146:	f7ff fd73 	bl	8000c30 <ILI9341_Draw_Horizontal_Line>
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800114a:	2312      	movs	r3, #18
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d108      	bne.n	8001166 <ILI9341_Draw_Hollow_Rectangle_Coord+0x100>
	{
		Y_length = Y1 - Y0;		
 8001154:	2314      	movs	r3, #20
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	0039      	movs	r1, r7
 800115a:	1d3a      	adds	r2, r7, #4
 800115c:	8809      	ldrh	r1, [r1, #0]
 800115e:	8812      	ldrh	r2, [r2, #0]
 8001160:	1a8a      	subs	r2, r1, r2
 8001162:	801a      	strh	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <ILI9341_Draw_Hollow_Rectangle_Coord+0x110>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8001166:	2314      	movs	r3, #20
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	1d39      	adds	r1, r7, #4
 800116c:	003a      	movs	r2, r7
 800116e:	8809      	ldrh	r1, [r1, #0]
 8001170:	8812      	ldrh	r2, [r2, #0]
 8001172:	1a8a      	subs	r2, r1, r2
 8001174:	801a      	strh	r2, [r3, #0]
	}

	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8001176:	2628      	movs	r6, #40	@ 0x28
 8001178:	2308      	movs	r3, #8
 800117a:	18f2      	adds	r2, r6, r3
 800117c:	19d3      	adds	r3, r2, r7
 800117e:	881c      	ldrh	r4, [r3, #0]
 8001180:	2514      	movs	r5, #20
 8001182:	197b      	adds	r3, r7, r5
 8001184:	881a      	ldrh	r2, [r3, #0]
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	8819      	ldrh	r1, [r3, #0]
 800118a:	1dbb      	adds	r3, r7, #6
 800118c:	8818      	ldrh	r0, [r3, #0]
 800118e:	0023      	movs	r3, r4
 8001190:	f7ff fda4 	bl	8000cdc <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8001194:	2308      	movs	r3, #8
 8001196:	18f3      	adds	r3, r6, r3
 8001198:	19db      	adds	r3, r3, r7
 800119a:	881c      	ldrh	r4, [r3, #0]
 800119c:	197b      	adds	r3, r7, r5
 800119e:	881a      	ldrh	r2, [r3, #0]
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	1cbb      	adds	r3, r7, #2
 80011a6:	8818      	ldrh	r0, [r3, #0]
 80011a8:	0023      	movs	r3, r4
 80011aa:	f7ff fd97 	bl	8000cdc <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 80011ae:	2316      	movs	r3, #22
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <ILI9341_Draw_Hollow_Rectangle_Coord+0x15a>
 80011b8:	197b      	adds	r3, r7, r5
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <ILI9341_Draw_Hollow_Rectangle_Coord+0x172>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80011c0:	2328      	movs	r3, #40	@ 0x28
 80011c2:	2208      	movs	r2, #8
 80011c4:	189b      	adds	r3, r3, r2
 80011c6:	19db      	adds	r3, r3, r7
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	003b      	movs	r3, r7
 80011cc:	8819      	ldrh	r1, [r3, #0]
 80011ce:	1cbb      	adds	r3, r7, #2
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	f7ff fb9a 	bl	800090c <ILI9341_Draw_Pixel>
	}
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b007      	add	sp, #28
 80011de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011e0 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	0005      	movs	r5, r0
 80011e8:	000c      	movs	r4, r1
 80011ea:	0010      	movs	r0, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	1dbb      	adds	r3, r7, #6
 80011f0:	1c2a      	adds	r2, r5, #0
 80011f2:	801a      	strh	r2, [r3, #0]
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	1c22      	adds	r2, r4, #0
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	1c02      	adds	r2, r0, #0
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	003b      	movs	r3, r7
 8001202:	1c0a      	adds	r2, r1, #0
 8001204:	801a      	strh	r2, [r3, #0]
	uint16_t 	X_length = 0;
 8001206:	2316      	movs	r3, #22
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	2200      	movs	r2, #0
 800120c:	801a      	strh	r2, [r3, #0]
	uint16_t 	Y_length = 0;
 800120e:	2314      	movs	r3, #20
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	2200      	movs	r2, #0
 8001214:	801a      	strh	r2, [r3, #0]
	uint8_t		Negative_X = 0;
 8001216:	2113      	movs	r1, #19
 8001218:	187b      	adds	r3, r7, r1
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
	uint8_t 	Negative_Y = 0;
 800121e:	2312      	movs	r3, #18
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
	int32_t 	Calc_Negative = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 800122a:	2310      	movs	r3, #16
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2200      	movs	r2, #0
 8001230:	801a      	strh	r2, [r3, #0]
	uint16_t Y0_true = 0;
 8001232:	230e      	movs	r3, #14
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
	
	Calc_Negative = X1 - X0;
 800123a:	1cbb      	adds	r3, r7, #2
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	1dbb      	adds	r3, r7, #6
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	da02      	bge.n	8001252 <ILI9341_Draw_Filled_Rectangle_Coord+0x72>
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
	Calc_Negative = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8001256:	003b      	movs	r3, r7
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	da03      	bge.n	8001270 <ILI9341_Draw_Filled_Rectangle_Coord+0x90>
 8001268:	2312      	movs	r3, #18
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001270:	2313      	movs	r3, #19
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10d      	bne.n	8001296 <ILI9341_Draw_Filled_Rectangle_Coord+0xb6>
	{
		X_length = X1 - X0;
 800127a:	2316      	movs	r3, #22
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	1cb9      	adds	r1, r7, #2
 8001280:	1dba      	adds	r2, r7, #6
 8001282:	8809      	ldrh	r1, [r1, #0]
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	1a8a      	subs	r2, r1, r2
 8001288:	801a      	strh	r2, [r3, #0]
		X0_true = X0;
 800128a:	2310      	movs	r3, #16
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	1dba      	adds	r2, r7, #6
 8001290:	8812      	ldrh	r2, [r2, #0]
 8001292:	801a      	strh	r2, [r3, #0]
 8001294:	e00c      	b.n	80012b0 <ILI9341_Draw_Filled_Rectangle_Coord+0xd0>
	}
	else
	{
		X_length = X0 - X1;
 8001296:	2316      	movs	r3, #22
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	1db9      	adds	r1, r7, #6
 800129c:	1cba      	adds	r2, r7, #2
 800129e:	8809      	ldrh	r1, [r1, #0]
 80012a0:	8812      	ldrh	r2, [r2, #0]
 80012a2:	1a8a      	subs	r2, r1, r2
 80012a4:	801a      	strh	r2, [r3, #0]
		X0_true = X1;
 80012a6:	2310      	movs	r3, #16
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	1cba      	adds	r2, r7, #2
 80012ac:	8812      	ldrh	r2, [r2, #0]
 80012ae:	801a      	strh	r2, [r3, #0]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80012b0:	2312      	movs	r3, #18
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <ILI9341_Draw_Filled_Rectangle_Coord+0xf6>
	{
		Y_length = Y1 - Y0;
 80012ba:	2314      	movs	r3, #20
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	0039      	movs	r1, r7
 80012c0:	1d3a      	adds	r2, r7, #4
 80012c2:	8809      	ldrh	r1, [r1, #0]
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	1a8a      	subs	r2, r1, r2
 80012c8:	801a      	strh	r2, [r3, #0]
		Y0_true = Y0;		
 80012ca:	230e      	movs	r3, #14
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	1d3a      	adds	r2, r7, #4
 80012d0:	8812      	ldrh	r2, [r2, #0]
 80012d2:	801a      	strh	r2, [r3, #0]
 80012d4:	e00c      	b.n	80012f0 <ILI9341_Draw_Filled_Rectangle_Coord+0x110>
	}
	else
	{
		Y_length = Y0 - Y1;
 80012d6:	2314      	movs	r3, #20
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	1d39      	adds	r1, r7, #4
 80012dc:	003a      	movs	r2, r7
 80012de:	8809      	ldrh	r1, [r1, #0]
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	1a8a      	subs	r2, r1, r2
 80012e4:	801a      	strh	r2, [r3, #0]
		Y0_true = Y1;	
 80012e6:	230e      	movs	r3, #14
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	003a      	movs	r2, r7
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	801a      	strh	r2, [r3, #0]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80012f0:	2314      	movs	r3, #20
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	881c      	ldrh	r4, [r3, #0]
 80012f6:	2316      	movs	r3, #22
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	230e      	movs	r3, #14
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	8819      	ldrh	r1, [r3, #0]
 8001302:	2310      	movs	r3, #16
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	8818      	ldrh	r0, [r3, #0]
 8001308:	2328      	movs	r3, #40	@ 0x28
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	0023      	movs	r3, r4
 8001312:	f7ff fc19 	bl	8000b48 <ILI9341_Draw_Rectangle>
}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b006      	add	sp, #24
 800131c:	bdb0      	pop	{r4, r5, r7, pc}

0800131e <ILI9341_Random_line>:

//////////////////////////////////////////////////////////////////////////////////////////////
void ILI9341_Random_line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800131e:	b5b0      	push	{r4, r5, r7, lr}
 8001320:	b088      	sub	sp, #32
 8001322:	af00      	add	r7, sp, #0
 8001324:	0005      	movs	r5, r0
 8001326:	000c      	movs	r4, r1
 8001328:	0010      	movs	r0, r2
 800132a:	0019      	movs	r1, r3
 800132c:	1dbb      	adds	r3, r7, #6
 800132e:	1c2a      	adds	r2, r5, #0
 8001330:	801a      	strh	r2, [r3, #0]
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	1c22      	adds	r2, r4, #0
 8001336:	801a      	strh	r2, [r3, #0]
 8001338:	1cbb      	adds	r3, r7, #2
 800133a:	1c02      	adds	r2, r0, #0
 800133c:	801a      	strh	r2, [r3, #0]
 800133e:	003b      	movs	r3, r7
 8001340:	1c0a      	adds	r2, r1, #0
 8001342:	801a      	strh	r2, [r3, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001344:	003b      	movs	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	5e9a      	ldrsh	r2, [r3, r2]
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2100      	movs	r1, #0
 800134e:	5e5b      	ldrsh	r3, [r3, r1]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	17d9      	asrs	r1, r3, #31
 8001354:	185a      	adds	r2, r3, r1
 8001356:	404a      	eors	r2, r1
 8001358:	1cbb      	adds	r3, r7, #2
 800135a:	2100      	movs	r1, #0
 800135c:	5e59      	ldrsh	r1, [r3, r1]
 800135e:	1dbb      	adds	r3, r7, #6
 8001360:	2000      	movs	r0, #0
 8001362:	5e1b      	ldrsh	r3, [r3, r0]
 8001364:	1acb      	subs	r3, r1, r3
 8001366:	17d9      	asrs	r1, r3, #31
 8001368:	185b      	adds	r3, r3, r1
 800136a:	404b      	eors	r3, r1
 800136c:	2101      	movs	r1, #1
 800136e:	429a      	cmp	r2, r3
 8001370:	dc01      	bgt.n	8001376 <ILI9341_Random_line+0x58>
 8001372:	2300      	movs	r3, #0
 8001374:	1c19      	adds	r1, r3, #0
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	211a      	movs	r1, #26
 800137a:	187b      	adds	r3, r7, r1
 800137c:	801a      	strh	r2, [r3, #0]

	if(steep)
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2200      	movs	r2, #0
 8001382:	5e9b      	ldrsh	r3, [r3, r2]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d019      	beq.n	80013bc <ILI9341_Random_line+0x9e>
	{
		swap(x1, y1);
 8001388:	2118      	movs	r1, #24
 800138a:	187b      	adds	r3, r7, r1
 800138c:	1dba      	adds	r2, r7, #6
 800138e:	8812      	ldrh	r2, [r2, #0]
 8001390:	801a      	strh	r2, [r3, #0]
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	1d3a      	adds	r2, r7, #4
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	801a      	strh	r2, [r3, #0]
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	187a      	adds	r2, r7, r1
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	801a      	strh	r2, [r3, #0]
		swap(x2, y2);
 80013a2:	2116      	movs	r1, #22
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	1cba      	adds	r2, r7, #2
 80013a8:	8812      	ldrh	r2, [r2, #0]
 80013aa:	801a      	strh	r2, [r3, #0]
 80013ac:	1cbb      	adds	r3, r7, #2
 80013ae:	003a      	movs	r2, r7
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	801a      	strh	r2, [r3, #0]
 80013b4:	003b      	movs	r3, r7
 80013b6:	187a      	adds	r2, r7, r1
 80013b8:	8812      	ldrh	r2, [r2, #0]
 80013ba:	801a      	strh	r2, [r3, #0]
	}

	if(x1 > x2)
 80013bc:	1dba      	adds	r2, r7, #6
 80013be:	1cbb      	adds	r3, r7, #2
 80013c0:	2100      	movs	r1, #0
 80013c2:	5e52      	ldrsh	r2, [r2, r1]
 80013c4:	2100      	movs	r1, #0
 80013c6:	5e5b      	ldrsh	r3, [r3, r1]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dd19      	ble.n	8001400 <ILI9341_Random_line+0xe2>
	{
		swap(x1, x2);
 80013cc:	2114      	movs	r1, #20
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	1dba      	adds	r2, r7, #6
 80013d2:	8812      	ldrh	r2, [r2, #0]
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	1dbb      	adds	r3, r7, #6
 80013d8:	1cba      	adds	r2, r7, #2
 80013da:	8812      	ldrh	r2, [r2, #0]
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	1cbb      	adds	r3, r7, #2
 80013e0:	187a      	adds	r2, r7, r1
 80013e2:	8812      	ldrh	r2, [r2, #0]
 80013e4:	801a      	strh	r2, [r3, #0]
		swap(y1, y2);
 80013e6:	2112      	movs	r1, #18
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	1d3a      	adds	r2, r7, #4
 80013ec:	8812      	ldrh	r2, [r2, #0]
 80013ee:	801a      	strh	r2, [r3, #0]
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	003a      	movs	r2, r7
 80013f4:	8812      	ldrh	r2, [r2, #0]
 80013f6:	801a      	strh	r2, [r3, #0]
 80013f8:	003b      	movs	r3, r7
 80013fa:	187a      	adds	r2, r7, r1
 80013fc:	8812      	ldrh	r2, [r2, #0]
 80013fe:	801a      	strh	r2, [r3, #0]
	}

	int16_t dx, dy;

	dx = x2 - x1;
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29a      	uxth	r2, r3
 800140c:	2010      	movs	r0, #16
 800140e:	183b      	adds	r3, r7, r0
 8001410:	801a      	strh	r2, [r3, #0]
	dy = abs(y2 - y1);
 8001412:	003b      	movs	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	5e9a      	ldrsh	r2, [r3, r2]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2100      	movs	r1, #0
 800141c:	5e5b      	ldrsh	r3, [r3, r1]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	17d9      	asrs	r1, r3, #31
 8001422:	185a      	adds	r2, r3, r1
 8001424:	404a      	eors	r2, r1
 8001426:	230e      	movs	r3, #14
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	801a      	strh	r2, [r3, #0]

	int16_t err = dx / 2;
 800142c:	231e      	movs	r3, #30
 800142e:	18fa      	adds	r2, r7, r3
 8001430:	183b      	adds	r3, r7, r0
 8001432:	2100      	movs	r1, #0
 8001434:	5e5b      	ldrsh	r3, [r3, r1]
 8001436:	2b00      	cmp	r3, #0
 8001438:	da00      	bge.n	800143c <ILI9341_Random_line+0x11e>
 800143a:	3301      	adds	r3, #1
 800143c:	105b      	asrs	r3, r3, #1
 800143e:	8013      	strh	r3, [r2, #0]
	int16_t ystep;

	if(y1 < y2)
 8001440:	1d3a      	adds	r2, r7, #4
 8001442:	003b      	movs	r3, r7
 8001444:	2100      	movs	r1, #0
 8001446:	5e52      	ldrsh	r2, [r2, r1]
 8001448:	2100      	movs	r1, #0
 800144a:	5e5b      	ldrsh	r3, [r3, r1]
 800144c:	429a      	cmp	r2, r3
 800144e:	da04      	bge.n	800145a <ILI9341_Random_line+0x13c>
	{
		ystep = 1;
 8001450:	231c      	movs	r3, #28
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	801a      	strh	r2, [r3, #0]
 8001458:	e049      	b.n	80014ee <ILI9341_Random_line+0x1d0>
	}
	else
	{
		ystep = -1;
 800145a:	231c      	movs	r3, #28
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	2201      	movs	r2, #1
 8001460:	4252      	negs	r2, r2
 8001462:	801a      	strh	r2, [r3, #0]
	}

	for(; x1 <= x2; x1++)
 8001464:	e043      	b.n	80014ee <ILI9341_Random_line+0x1d0>
	{
		if(steep)
 8001466:	231a      	movs	r3, #26
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2200      	movs	r2, #0
 800146c:	5e9b      	ldrsh	r3, [r3, r2]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00a      	beq.n	8001488 <ILI9341_Random_line+0x16a>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	8818      	ldrh	r0, [r3, #0]
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	8819      	ldrh	r1, [r3, #0]
 800147a:	2330      	movs	r3, #48	@ 0x30
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	001a      	movs	r2, r3
 8001482:	f7ff fa43 	bl	800090c <ILI9341_Draw_Pixel>
 8001486:	e009      	b.n	800149c <ILI9341_Random_line+0x17e>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 8001488:	1dbb      	adds	r3, r7, #6
 800148a:	8818      	ldrh	r0, [r3, #0]
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	8819      	ldrh	r1, [r3, #0]
 8001490:	2330      	movs	r3, #48	@ 0x30
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	001a      	movs	r2, r3
 8001498:	f7ff fa38 	bl	800090c <ILI9341_Draw_Pixel>
		}

		err -= dy;
 800149c:	211e      	movs	r1, #30
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	881a      	ldrh	r2, [r3, #0]
 80014a2:	230e      	movs	r3, #14
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	801a      	strh	r2, [r3, #0]

		if(err < 0)
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	5e9b      	ldrsh	r3, [r3, r2]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da11      	bge.n	80014de <ILI9341_Random_line+0x1c0>
		{
			y1 += ystep;
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	231c      	movs	r3, #28
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	18d3      	adds	r3, r2, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	801a      	strh	r2, [r3, #0]
			err += dx;
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	2310      	movs	r3, #16
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	b29a      	uxth	r2, r3
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	801a      	strh	r2, [r3, #0]
	for(; x1 <= x2; x1++)
 80014de:	1dbb      	adds	r3, r7, #6
 80014e0:	2200      	movs	r2, #0
 80014e2:	5e9b      	ldrsh	r3, [r3, r2]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	1dbb      	adds	r3, r7, #6
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	1dba      	adds	r2, r7, #6
 80014f0:	1cbb      	adds	r3, r7, #2
 80014f2:	2100      	movs	r1, #0
 80014f4:	5e52      	ldrsh	r2, [r2, r1]
 80014f6:	2100      	movs	r1, #0
 80014f8:	5e5b      	ldrsh	r3, [r3, r1]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	ddb3      	ble.n	8001466 <ILI9341_Random_line+0x148>
		}
	}
}
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b008      	add	sp, #32
 8001506:	bdb0      	pop	{r4, r5, r7, pc}

08001508 <ILI9341_Draw_Image>:

/////////////////////////////////////// Картинка из массива ///////////////////////////////////////////////////
void ILI9341_Draw_Image(const char *image_array, uint16_t x_coordinat, uint16_t y_coordinat, uint16_t img_width, uint16_t img_height, uint32_t s_img)
{
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	000c      	movs	r4, r1
 8001512:	0010      	movs	r0, r2
 8001514:	0019      	movs	r1, r3
 8001516:	250a      	movs	r5, #10
 8001518:	197b      	adds	r3, r7, r5
 800151a:	1c22      	adds	r2, r4, #0
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	2608      	movs	r6, #8
 8001520:	19bb      	adds	r3, r7, r6
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	801a      	strh	r2, [r3, #0]
 8001526:	1dbb      	adds	r3, r7, #6
 8001528:	1c0a      	adds	r2, r1, #0
 800152a:	801a      	strh	r2, [r3, #0]
	ILI9341_Set_Address(x_coordinat, y_coordinat, img_width + x_coordinat - 1, img_height + y_coordinat - 1);
 800152c:	1dba      	adds	r2, r7, #6
 800152e:	0028      	movs	r0, r5
 8001530:	183b      	adds	r3, r7, r0
 8001532:	8812      	ldrh	r2, [r2, #0]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	18d3      	adds	r3, r2, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	3b01      	subs	r3, #1
 800153c:	b29c      	uxth	r4, r3
 800153e:	2328      	movs	r3, #40	@ 0x28
 8001540:	2208      	movs	r2, #8
 8001542:	189b      	adds	r3, r3, r2
 8001544:	19db      	adds	r3, r3, r7
 8001546:	19b9      	adds	r1, r7, r6
 8001548:	881a      	ldrh	r2, [r3, #0]
 800154a:	880b      	ldrh	r3, [r1, #0]
 800154c:	18d3      	adds	r3, r2, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	19bb      	adds	r3, r7, r6
 8001556:	8819      	ldrh	r1, [r3, #0]
 8001558:	183b      	adds	r3, r7, r0
 800155a:	8818      	ldrh	r0, [r3, #0]
 800155c:	0013      	movs	r3, r2
 800155e:	0022      	movs	r2, r4
 8001560:	f7fe feca 	bl	80002f8 <ILI9341_Set_Address>

	DISP_DC_DATA;
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <ILI9341_Draw_Image+0xd4>)
 8001566:	2201      	movs	r2, #1
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	0018      	movs	r0, r3
 800156c:	f001 f8e6 	bl	800273c <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	0059      	lsls	r1, r3, #1
 8001574:	2390      	movs	r3, #144	@ 0x90
 8001576:	05db      	lsls	r3, r3, #23
 8001578:	2200      	movs	r2, #0
 800157a:	0018      	movs	r0, r3
 800157c:	f001 f8de 	bl	800273c <HAL_GPIO_WritePin>

	for(uint32_t i = 0; i < s_img; i++)
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e00e      	b.n	80015a4 <ILI9341_Draw_Image+0x9c>
	{
		*(__IO uint8_t*)&(DISP_SPI->DR) = image_array[i];
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	18d3      	adds	r3, r2, r3
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <ILI9341_Draw_Image+0xd8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	7013      	strb	r3, [r2, #0]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <ILI9341_Draw_Image+0xdc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2202      	movs	r2, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d0fa      	beq.n	8001594 <ILI9341_Draw_Image+0x8c>
	for(uint32_t i = 0; i < s_img; i++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3ec      	bcc.n	8001586 <ILI9341_Draw_Image+0x7e>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <ILI9341_Draw_Image+0xdc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0fa      	beq.n	80015ae <ILI9341_Draw_Image+0xa6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <ILI9341_Draw_Image+0xdc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1fa      	bne.n	80015ba <ILI9341_Draw_Image+0xb2>
	DISP_CS_UNSELECT;
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	0059      	lsls	r1, r3, #1
 80015c8:	2390      	movs	r3, #144	@ 0x90
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	2201      	movs	r2, #1
 80015ce:	0018      	movs	r0, r3
 80015d0:	f001 f8b4 	bl	800273c <HAL_GPIO_WritePin>
}
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b007      	add	sp, #28
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	48000800 	.word	0x48000800
 80015e0:	4001300c 	.word	0x4001300c
 80015e4:	40013000 	.word	0x40013000

080015e8 <ILI9341_WriteChar>:


// Вывод символа
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80015e8:	b082      	sub	sp, #8
 80015ea:	b5b0      	push	{r4, r5, r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	0004      	movs	r4, r0
 80015f2:	0008      	movs	r0, r1
 80015f4:	0011      	movs	r1, r2
 80015f6:	2204      	movs	r2, #4
 80015f8:	2528      	movs	r5, #40	@ 0x28
 80015fa:	1952      	adds	r2, r2, r5
 80015fc:	19d2      	adds	r2, r2, r7
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	1c22      	adds	r2, r4, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	1c02      	adds	r2, r0, #0
 800160a:	801a      	strh	r2, [r3, #0]
 800160c:	1cfb      	adds	r3, r7, #3
 800160e:	1c0a      	adds	r2, r1, #0
 8001610:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 8001612:	2304      	movs	r3, #4
 8001614:	0029      	movs	r1, r5
 8001616:	185b      	adds	r3, r3, r1
 8001618:	19db      	adds	r3, r3, r7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	001a      	movs	r2, r3
 800161e:	1dbb      	adds	r3, r7, #6
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	18d3      	adds	r3, r2, r3
 8001624:	b29b      	uxth	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	2304      	movs	r3, #4
 800162c:	185b      	adds	r3, r3, r1
 800162e:	19db      	adds	r3, r3, r7
 8001630:	785b      	ldrb	r3, [r3, #1]
 8001632:	0019      	movs	r1, r3
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	18cb      	adds	r3, r1, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29c      	uxth	r4, r3
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	8819      	ldrh	r1, [r3, #0]
 8001644:	1dbb      	adds	r3, r7, #6
 8001646:	8818      	ldrh	r0, [r3, #0]
 8001648:	0023      	movs	r3, r4
 800164a:	f7fe fe55 	bl	80002f8 <ILI9341_Set_Address>

    for(i = 0; i < font.height; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e04b      	b.n	80016ec <ILI9341_WriteChar+0x104>
    {
        b = font.data[(ch - 32) * font.height + i];
 8001654:	2304      	movs	r3, #4
 8001656:	2028      	movs	r0, #40	@ 0x28
 8001658:	181b      	adds	r3, r3, r0
 800165a:	19db      	adds	r3, r3, r7
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	1cfb      	adds	r3, r7, #3
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	3b20      	subs	r3, #32
 8001664:	2104      	movs	r1, #4
 8001666:	1809      	adds	r1, r1, r0
 8001668:	19c9      	adds	r1, r1, r7
 800166a:	7849      	ldrb	r1, [r1, #1]
 800166c:	434b      	muls	r3, r1
 800166e:	0019      	movs	r1, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	18cb      	adds	r3, r1, r3
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	18d3      	adds	r3, r2, r3
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	60fb      	str	r3, [r7, #12]

        for(j = 0; j < font.width; j++)
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	e028      	b.n	80016d4 <ILI9341_WriteChar+0xec>
        {
            if((b << j) & 0x8000)
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	409a      	lsls	r2, r3
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4013      	ands	r3, r2
 800168e:	d00f      	beq.n	80016b0 <ILI9341_WriteChar+0xc8>
            {
                ILI9341_Write_Data(color >> 8);
 8001690:	2434      	movs	r4, #52	@ 0x34
 8001692:	193b      	adds	r3, r7, r4
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	0a1b      	lsrs	r3, r3, #8
 8001698:	b29b      	uxth	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	0018      	movs	r0, r3
 800169e:	f7fe fdf5 	bl	800028c <ILI9341_Write_Data>
                ILI9341_Write_Data(color & 0xFF);
 80016a2:	193b      	adds	r3, r7, r4
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7fe fdef 	bl	800028c <ILI9341_Write_Data>
 80016ae:	e00e      	b.n	80016ce <ILI9341_WriteChar+0xe6>
            }
            else
            {
                ILI9341_Write_Data(bgcolor >> 8);
 80016b0:	2438      	movs	r4, #56	@ 0x38
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe fde5 	bl	800028c <ILI9341_Write_Data>
                ILI9341_Write_Data(bgcolor & 0xFF);
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7fe fddf 	bl	800028c <ILI9341_Write_Data>
        for(j = 0; j < font.width; j++)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	3301      	adds	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	2304      	movs	r3, #4
 80016d6:	2228      	movs	r2, #40	@ 0x28
 80016d8:	189b      	adds	r3, r3, r2
 80016da:	19db      	adds	r3, r3, r7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	001a      	movs	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d3cd      	bcc.n	8001682 <ILI9341_WriteChar+0x9a>
    for(i = 0; i < font.height; i++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	2304      	movs	r3, #4
 80016ee:	2228      	movs	r2, #40	@ 0x28
 80016f0:	189b      	adds	r3, r3, r2
 80016f2:	19db      	adds	r3, r3, r7
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	001a      	movs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d3aa      	bcc.n	8001654 <ILI9341_WriteChar+0x6c>
            }
        }
    }
}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bcb0      	pop	{r4, r5, r7}
 8001708:	bc08      	pop	{r3}
 800170a:	b002      	add	sp, #8
 800170c:	4718      	bx	r3

0800170e <ILI9341_WriteString>:

// Вывод строки
void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800170e:	b082      	sub	sp, #8
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af04      	add	r7, sp, #16
 8001716:	603a      	str	r2, [r7, #0]
 8001718:	2204      	movs	r2, #4
 800171a:	2418      	movs	r4, #24
 800171c:	1912      	adds	r2, r2, r4
 800171e:	2408      	movs	r4, #8
 8001720:	46a4      	mov	ip, r4
 8001722:	44bc      	add	ip, r7
 8001724:	4462      	add	r2, ip
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	1dbb      	adds	r3, r7, #6
 800172a:	1c02      	adds	r2, r0, #0
 800172c:	801a      	strh	r2, [r3, #0]
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	1c0a      	adds	r2, r1, #0
 8001732:	801a      	strh	r2, [r3, #0]
    while(*str)
 8001734:	e062      	b.n	80017fc <ILI9341_WriteString+0xee>
    {
        if(x + font.width >= ILI9341_SCREEN_WIDTH)
 8001736:	1dbb      	adds	r3, r7, #6
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	2204      	movs	r2, #4
 800173c:	2018      	movs	r0, #24
 800173e:	1812      	adds	r2, r2, r0
 8001740:	2108      	movs	r1, #8
 8001742:	468c      	mov	ip, r1
 8001744:	44bc      	add	ip, r7
 8001746:	4462      	add	r2, ip
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	189a      	adds	r2, r3, r2
 800174c:	23a0      	movs	r3, #160	@ 0xa0
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	429a      	cmp	r2, r3
 8001752:	db23      	blt.n	800179c <ILI9341_WriteString+0x8e>
        {
            x = 0;
 8001754:	1dbb      	adds	r3, r7, #6
 8001756:	2200      	movs	r2, #0
 8001758:	801a      	strh	r2, [r3, #0]
            y += font.height;
 800175a:	2304      	movs	r3, #4
 800175c:	181b      	adds	r3, r3, r0
 800175e:	2208      	movs	r2, #8
 8001760:	4694      	mov	ip, r2
 8001762:	44bc      	add	ip, r7
 8001764:	4463      	add	r3, ip
 8001766:	785b      	ldrb	r3, [r3, #1]
 8001768:	0019      	movs	r1, r3
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	1d3a      	adds	r2, r7, #4
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	188a      	adds	r2, r1, r2
 8001772:	801a      	strh	r2, [r3, #0]

            if(y + font.height >= ILI9341_SCREEN_HEIGHT)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	2204      	movs	r2, #4
 800177a:	1812      	adds	r2, r2, r0
 800177c:	2108      	movs	r1, #8
 800177e:	468c      	mov	ip, r1
 8001780:	44bc      	add	ip, r7
 8001782:	4462      	add	r2, ip
 8001784:	7852      	ldrb	r2, [r2, #1]
 8001786:	189b      	adds	r3, r3, r2
 8001788:	2bef      	cmp	r3, #239	@ 0xef
 800178a:	dc3c      	bgt.n	8001806 <ILI9341_WriteString+0xf8>
            {
                break;
            }

            if(*str == ' ')
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b20      	cmp	r3, #32
 8001792:	d103      	bne.n	800179c <ILI9341_WriteString+0x8e>
            {
                str++;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	603b      	str	r3, [r7, #0]
                continue;
 800179a:	e02f      	b.n	80017fc <ILI9341_WriteString+0xee>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	781d      	ldrb	r5, [r3, #0]
 80017a0:	2304      	movs	r3, #4
 80017a2:	2618      	movs	r6, #24
 80017a4:	199b      	adds	r3, r3, r6
 80017a6:	2208      	movs	r2, #8
 80017a8:	4694      	mov	ip, r2
 80017aa:	44bc      	add	ip, r7
 80017ac:	4463      	add	r3, ip
 80017ae:	1d3a      	adds	r2, r7, #4
 80017b0:	8814      	ldrh	r4, [r2, #0]
 80017b2:	1dba      	adds	r2, r7, #6
 80017b4:	8810      	ldrh	r0, [r2, #0]
 80017b6:	2228      	movs	r2, #40	@ 0x28
 80017b8:	2108      	movs	r1, #8
 80017ba:	1852      	adds	r2, r2, r1
 80017bc:	19d2      	adds	r2, r2, r7
 80017be:	8812      	ldrh	r2, [r2, #0]
 80017c0:	9202      	str	r2, [sp, #8]
 80017c2:	2224      	movs	r2, #36	@ 0x24
 80017c4:	1852      	adds	r2, r2, r1
 80017c6:	19d2      	adds	r2, r2, r7
 80017c8:	8812      	ldrh	r2, [r2, #0]
 80017ca:	9201      	str	r2, [sp, #4]
 80017cc:	466a      	mov	r2, sp
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	6011      	str	r1, [r2, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	002a      	movs	r2, r5
 80017d6:	0021      	movs	r1, r4
 80017d8:	f7ff ff06 	bl	80015e8 <ILI9341_WriteChar>
        x += font.width;
 80017dc:	2304      	movs	r3, #4
 80017de:	199b      	adds	r3, r3, r6
 80017e0:	2208      	movs	r2, #8
 80017e2:	4694      	mov	ip, r2
 80017e4:	44bc      	add	ip, r7
 80017e6:	4463      	add	r3, ip
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0019      	movs	r1, r3
 80017ec:	1dbb      	adds	r3, r7, #6
 80017ee:	1dba      	adds	r2, r7, #6
 80017f0:	8812      	ldrh	r2, [r2, #0]
 80017f2:	188a      	adds	r2, r1, r2
 80017f4:	801a      	strh	r2, [r3, #0]
        str++;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	603b      	str	r3, [r7, #0]
    while(*str)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d198      	bne.n	8001736 <ILI9341_WriteString+0x28>
    }
}
 8001804:	e000      	b.n	8001808 <ILI9341_WriteString+0xfa>
                break;
 8001806:	46c0      	nop			@ (mov r8, r8)
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b003      	add	sp, #12
 800180e:	bcf0      	pop	{r4, r5, r6, r7}
 8001810:	bc08      	pop	{r3}
 8001812:	b002      	add	sp, #8
 8001814:	4718      	bx	r3
	...

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b08b      	sub	sp, #44	@ 0x2c
 800181c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f000 fce1 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 fa53 	bl	8001ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f000 fb09 	bl	8001e3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800182a:	f000 fad7 	bl	8001ddc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800182e:	f000 fa97 	bl	8001d60 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  	__HAL_SPI_ENABLE(DISP_SPI_PTR); // включаем SPI
 8001832:	4b6a      	ldr	r3, [pc, #424]	@ (80019dc <main+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b68      	ldr	r3, [pc, #416]	@ (80019dc <main+0x1c4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2140      	movs	r1, #64	@ 0x40
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

    DISP_CS_UNSELECT;
 8001842:	2380      	movs	r3, #128	@ 0x80
 8001844:	0059      	lsls	r1, r3, #1
 8001846:	2390      	movs	r3, #144	@ 0x90
 8001848:	05db      	lsls	r3, r3, #23
 800184a:	2201      	movs	r2, #1
 800184c:	0018      	movs	r0, r3
 800184e:	f000 ff75 	bl	800273c <HAL_GPIO_WritePin>
    TOUCH_CS_UNSELECT;
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	00d9      	lsls	r1, r3, #3
 8001856:	2390      	movs	r3, #144	@ 0x90
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	2201      	movs	r2, #1
 800185c:	0018      	movs	r0, r3
 800185e:	f000 ff6d 	bl	800273c <HAL_GPIO_WritePin>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Init(); // инициализация дисплея
 8001862:	f7fe fec5 	bl	80005f0 <ILI9341_Init>

    /////////////////////////// далее демонстрируются различные пользовательские функции ////////////////////////////
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1); // установка ориентации экрана (варианты в файле ILI9341_GFX.h)
 8001866:	2001      	movs	r0, #1
 8001868:	f7fe fe4e 	bl	8000508 <ILI9341_Set_Rotation>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Fill_Screen(BLACK); // заливка всего экрана цветом (цвета в файле ILI9341_GFX.h)
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff f825 	bl	80008bc <ILI9341_Fill_Screen>
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* вывод строк разными шрифтами (шрифты определены в файле fonts.h, а массивы шрифтов в файле fonts.c)
    первый и второй аргумент это начало координат (справа, сверху), четвёртый аргумент шрифт
    два последних аргумента это цвет шрифта и цвет фона шрифта */

    ILI9341_WriteString(10, 10, "Hello World", Font_7x10, WHITE, BLACK); // можно передавать непосредственно текст
 8001872:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <main+0x1c8>)
 8001874:	485b      	ldr	r0, [pc, #364]	@ (80019e4 <main+0x1cc>)
 8001876:	2200      	movs	r2, #0
 8001878:	9202      	str	r2, [sp, #8]
 800187a:	4a5b      	ldr	r2, [pc, #364]	@ (80019e8 <main+0x1d0>)
 800187c:	9201      	str	r2, [sp, #4]
 800187e:	466a      	mov	r2, sp
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	6011      	str	r1, [r2, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0002      	movs	r2, r0
 8001888:	210a      	movs	r1, #10
 800188a:	200a      	movs	r0, #10
 800188c:	f7ff ff3f 	bl	800170e <ILI9341_WriteString>
    ILI9341_WriteString(20, 30, "Hello World", Font_11x18, WHITE, MYFON);
 8001890:	4b56      	ldr	r3, [pc, #344]	@ (80019ec <main+0x1d4>)
 8001892:	4854      	ldr	r0, [pc, #336]	@ (80019e4 <main+0x1cc>)
 8001894:	4a56      	ldr	r2, [pc, #344]	@ (80019f0 <main+0x1d8>)
 8001896:	9202      	str	r2, [sp, #8]
 8001898:	4a53      	ldr	r2, [pc, #332]	@ (80019e8 <main+0x1d0>)
 800189a:	9201      	str	r2, [sp, #4]
 800189c:	466a      	mov	r2, sp
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	6011      	str	r1, [r2, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0002      	movs	r2, r0
 80018a6:	211e      	movs	r1, #30
 80018a8:	2014      	movs	r0, #20
 80018aa:	f7ff ff30 	bl	800170e <ILI9341_WriteString>
    ILI9341_WriteString(30, 60, "Hello World", Font_16x26, BLUE, DARKGREEN);
 80018ae:	4b51      	ldr	r3, [pc, #324]	@ (80019f4 <main+0x1dc>)
 80018b0:	484c      	ldr	r0, [pc, #304]	@ (80019e4 <main+0x1cc>)
 80018b2:	22f8      	movs	r2, #248	@ 0xf8
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	9202      	str	r2, [sp, #8]
 80018b8:	221f      	movs	r2, #31
 80018ba:	9201      	str	r2, [sp, #4]
 80018bc:	466a      	mov	r2, sp
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0002      	movs	r2, r0
 80018c6:	213c      	movs	r1, #60	@ 0x3c
 80018c8:	201e      	movs	r0, #30
 80018ca:	f7ff ff20 	bl	800170e <ILI9341_WriteString>

    char txt_buf[] = "Hello World";
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4a44      	ldr	r2, [pc, #272]	@ (80019e4 <main+0x1cc>)
 80018d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018d4:	c313      	stmia	r3!, {r0, r1, r4}
    ILI9341_WriteString(40, 96, txt_buf, Font_16x26, RED, GREEN); // можно передавать массив
 80018d6:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <main+0x1dc>)
 80018d8:	1d38      	adds	r0, r7, #4
 80018da:	22fc      	movs	r2, #252	@ 0xfc
 80018dc:	00d2      	lsls	r2, r2, #3
 80018de:	9202      	str	r2, [sp, #8]
 80018e0:	22f8      	movs	r2, #248	@ 0xf8
 80018e2:	0212      	lsls	r2, r2, #8
 80018e4:	9201      	str	r2, [sp, #4]
 80018e6:	466a      	mov	r2, sp
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	6011      	str	r1, [r2, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0002      	movs	r2, r0
 80018f0:	2160      	movs	r1, #96	@ 0x60
 80018f2:	2028      	movs	r0, #40	@ 0x28
 80018f4:	f7ff ff0b 	bl	800170e <ILI9341_WriteString>

    HAL_Delay(1000);
 80018f8:	23fa      	movs	r3, #250	@ 0xfa
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f000 fcd5 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <main+0x1d8>)
 8001904:	0018      	movs	r0, r3
 8001906:	f7fe ffd9 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Pixel(100, 100, WHITE); // рисует пиксель (координаты и цвет)
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <main+0x1d0>)
 800190c:	001a      	movs	r2, r3
 800190e:	2164      	movs	r1, #100	@ 0x64
 8001910:	2064      	movs	r0, #100	@ 0x64
 8001912:	f7fe fffb 	bl	800090c <ILI9341_Draw_Pixel>
    HAL_Delay(300);
 8001916:	2396      	movs	r3, #150	@ 0x96
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fcc6 	bl	80022ac <HAL_Delay>
    ILI9341_Draw_Pixel(102, 100, MAROON);
 8001920:	23f0      	movs	r3, #240	@ 0xf0
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	001a      	movs	r2, r3
 8001926:	2164      	movs	r1, #100	@ 0x64
 8001928:	2066      	movs	r0, #102	@ 0x66
 800192a:	f7fe ffef 	bl	800090c <ILI9341_Draw_Pixel>
    HAL_Delay(300);
 800192e:	2396      	movs	r3, #150	@ 0x96
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	0018      	movs	r0, r3
 8001934:	f000 fcba 	bl	80022ac <HAL_Delay>
    ILI9341_Draw_Pixel(100, 102, BLUE);
 8001938:	221f      	movs	r2, #31
 800193a:	2166      	movs	r1, #102	@ 0x66
 800193c:	2064      	movs	r0, #100	@ 0x64
 800193e:	f7fe ffe5 	bl	800090c <ILI9341_Draw_Pixel>
    HAL_Delay(300);
 8001942:	2396      	movs	r3, #150	@ 0x96
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	0018      	movs	r0, r3
 8001948:	f000 fcb0 	bl	80022ac <HAL_Delay>
    ILI9341_Draw_Pixel(102, 102, RED);
 800194c:	23f8      	movs	r3, #248	@ 0xf8
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	001a      	movs	r2, r3
 8001952:	2166      	movs	r1, #102	@ 0x66
 8001954:	2066      	movs	r0, #102	@ 0x66
 8001956:	f7fe ffd9 	bl	800090c <ILI9341_Draw_Pixel>
    HAL_Delay(300);
 800195a:	2396      	movs	r3, #150	@ 0x96
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	0018      	movs	r0, r3
 8001960:	f000 fca4 	bl	80022ac <HAL_Delay>

    for(uint8_t i = 0; i < 100; i++)
 8001964:	2317      	movs	r3, #23
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e010      	b.n	8001990 <main+0x178>
    {
            ILI9341_Draw_Pixel(i, 20, WHITE);
 800196e:	2417      	movs	r4, #23
 8001970:	193b      	adds	r3, r7, r4
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <main+0x1d0>)
 8001978:	2114      	movs	r1, #20
 800197a:	0018      	movs	r0, r3
 800197c:	f7fe ffc6 	bl	800090c <ILI9341_Draw_Pixel>
            HAL_Delay(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f000 fc93 	bl	80022ac <HAL_Delay>
    for(uint8_t i = 0; i < 100; i++)
 8001986:	193b      	adds	r3, r7, r4
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	193b      	adds	r3, r7, r4
 800198c:	3201      	adds	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	2317      	movs	r3, #23
 8001992:	18fb      	adds	r3, r7, r3
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b63      	cmp	r3, #99	@ 0x63
 8001998:	d9e9      	bls.n	800196e <main+0x156>
    }

    for(uint8_t i = 0; i < 100; i++)
 800199a:	2316      	movs	r3, #22
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e010      	b.n	80019c6 <main+0x1ae>
    {
            ILI9341_Draw_Pixel(40, i, BLUE);
 80019a4:	2416      	movs	r4, #22
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	221f      	movs	r2, #31
 80019ae:	0019      	movs	r1, r3
 80019b0:	2028      	movs	r0, #40	@ 0x28
 80019b2:	f7fe ffab 	bl	800090c <ILI9341_Draw_Pixel>
            HAL_Delay(10);
 80019b6:	200a      	movs	r0, #10
 80019b8:	f000 fc78 	bl	80022ac <HAL_Delay>
    for(uint8_t i = 0; i < 100; i++)
 80019bc:	193b      	adds	r3, r7, r4
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	193b      	adds	r3, r7, r4
 80019c2:	3201      	adds	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	2316      	movs	r3, #22
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b63      	cmp	r3, #99	@ 0x63
 80019ce:	d9e9      	bls.n	80019a4 <main+0x18c>
    }
//
    for(uint8_t i = 0; i < 100; i++)
 80019d0:	2315      	movs	r3, #21
 80019d2:	18fb      	adds	r3, r7, r3
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	e022      	b.n	8001a20 <main+0x208>
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	20000044 	.word	0x20000044
 80019e0:	20000004 	.word	0x20000004
 80019e4:	0800399c 	.word	0x0800399c
 80019e8:	0000ffff 	.word	0x0000ffff
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	00002965 	.word	0x00002965
 80019f4:	20000014 	.word	0x20000014
    {
            ILI9341_Draw_Pixel(i, i, RED);
 80019f8:	2415      	movs	r4, #21
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b298      	uxth	r0, r3
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	22f8      	movs	r2, #248	@ 0xf8
 8001a08:	0212      	lsls	r2, r2, #8
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	f7fe ff7e 	bl	800090c <ILI9341_Draw_Pixel>
            HAL_Delay(10);
 8001a10:	200a      	movs	r0, #10
 8001a12:	f000 fc4b 	bl	80022ac <HAL_Delay>
    for(uint8_t i = 0; i < 100; i++)
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	3201      	adds	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	2315      	movs	r3, #21
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b63      	cmp	r3, #99	@ 0x63
 8001a28:	d9e6      	bls.n	80019f8 <main+0x1e0>
    }

    HAL_Delay(1000);
 8001a2a:	23fa      	movs	r3, #250	@ 0xfa
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fc3c 	bl	80022ac <HAL_Delay>
//
    ILI9341_Fill_Screen(MYFON);
 8001a34:	4b9d      	ldr	r3, [pc, #628]	@ (8001cac <main+0x494>)
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7fe ff40 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Rectangle(10, 10, 50, 70, WHITE); // рисует закрашеный прямоугольник (первые два аргумента это начальные координаты, а следующие два это ширина и высота)
 8001a3c:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb0 <main+0x498>)
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2346      	movs	r3, #70	@ 0x46
 8001a42:	2232      	movs	r2, #50	@ 0x32
 8001a44:	210a      	movs	r1, #10
 8001a46:	200a      	movs	r0, #10
 8001a48:	f7ff f87e 	bl	8000b48 <ILI9341_Draw_Rectangle>

    HAL_Delay(1000);
 8001a4c:	23fa      	movs	r3, #250	@ 0xfa
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 fc2b 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001a56:	4b95      	ldr	r3, [pc, #596]	@ (8001cac <main+0x494>)
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7fe ff2f 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Horizontal_Line(10, 10, 200, WHITE); // рисует горизонтальную линию (первые два аргумента это начальные координаты, а третий длина)
 8001a5e:	4b94      	ldr	r3, [pc, #592]	@ (8001cb0 <main+0x498>)
 8001a60:	22c8      	movs	r2, #200	@ 0xc8
 8001a62:	210a      	movs	r1, #10
 8001a64:	200a      	movs	r0, #10
 8001a66:	f7ff f8e3 	bl	8000c30 <ILI9341_Draw_Horizontal_Line>

    HAL_Delay(1000);
 8001a6a:	23fa      	movs	r3, #250	@ 0xfa
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f000 fc1c 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001a74:	4b8d      	ldr	r3, [pc, #564]	@ (8001cac <main+0x494>)
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7fe ff20 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Vertical_Line(10, 10, 200, WHITE); // рисует вертикальную линию (первые два аргумента это начальные координаты, а третий длина)
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb0 <main+0x498>)
 8001a7e:	22c8      	movs	r2, #200	@ 0xc8
 8001a80:	210a      	movs	r1, #10
 8001a82:	200a      	movs	r0, #10
 8001a84:	f7ff f92a 	bl	8000cdc <ILI9341_Draw_Vertical_Line>

    HAL_Delay(1000);
 8001a88:	23fa      	movs	r3, #250	@ 0xfa
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f000 fc0d 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001a92:	4b86      	ldr	r3, [pc, #536]	@ (8001cac <main+0x494>)
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7fe ff11 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Random_line(160, 120, 50, 175, WHITE); // рисует произвольную линию (первые два аргумента это начальные координаты, а третий и четвёртый - конечные)
 8001a9a:	4b85      	ldr	r3, [pc, #532]	@ (8001cb0 <main+0x498>)
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	23af      	movs	r3, #175	@ 0xaf
 8001aa0:	2232      	movs	r2, #50	@ 0x32
 8001aa2:	2178      	movs	r1, #120	@ 0x78
 8001aa4:	20a0      	movs	r0, #160	@ 0xa0
 8001aa6:	f7ff fc3a 	bl	800131e <ILI9341_Random_line>

    HAL_Delay(1000);
 8001aaa:	23fa      	movs	r3, #250	@ 0xfa
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 fbfc 	bl	80022ac <HAL_Delay>

    ILI9341_Random_line(123, 180, 150, 75, WHITE);
 8001ab4:	4b7e      	ldr	r3, [pc, #504]	@ (8001cb0 <main+0x498>)
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	234b      	movs	r3, #75	@ 0x4b
 8001aba:	2296      	movs	r2, #150	@ 0x96
 8001abc:	21b4      	movs	r1, #180	@ 0xb4
 8001abe:	207b      	movs	r0, #123	@ 0x7b
 8001ac0:	f7ff fc2d 	bl	800131e <ILI9341_Random_line>

    HAL_Delay(1000);
 8001ac4:	23fa      	movs	r3, #250	@ 0xfa
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 fbef 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001ace:	4b77      	ldr	r3, [pc, #476]	@ (8001cac <main+0x494>)
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7fe fef3 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Hollow_Circle(100, 100, 50, WHITE); // рисует прозрачный круг (первые два аргумента это координаты центра, а третий радиус)
 8001ad6:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <main+0x498>)
 8001ad8:	2232      	movs	r2, #50	@ 0x32
 8001ada:	2164      	movs	r1, #100	@ 0x64
 8001adc:	2064      	movs	r0, #100	@ 0x64
 8001ade:	f7ff f953 	bl	8000d88 <ILI9341_Draw_Hollow_Circle>

    HAL_Delay(1000);
 8001ae2:	23fa      	movs	r3, #250	@ 0xfa
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 fbe0 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001aec:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <main+0x494>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fee4 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Filled_Circle(150, 100, 40, WHITE); // рисует закрашеный круг (первые два аргумента это координаты центра, а третий радиус)
 8001af4:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb0 <main+0x498>)
 8001af6:	2228      	movs	r2, #40	@ 0x28
 8001af8:	2164      	movs	r1, #100	@ 0x64
 8001afa:	2096      	movs	r0, #150	@ 0x96
 8001afc:	f7ff fa19 	bl	8000f32 <ILI9341_Draw_Filled_Circle>

    HAL_Delay(1000);
 8001b00:	23fa      	movs	r3, #250	@ 0xfa
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fbd1 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001b0a:	4b68      	ldr	r3, [pc, #416]	@ (8001cac <main+0x494>)
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe fed5 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 50, 70, WHITE); // рисует прозрачный прямоугольник (первые два аргумента это начальные координаты, а вторые два конечные)
 8001b12:	4b67      	ldr	r3, [pc, #412]	@ (8001cb0 <main+0x498>)
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2346      	movs	r3, #70	@ 0x46
 8001b18:	2232      	movs	r2, #50	@ 0x32
 8001b1a:	210a      	movs	r1, #10
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f7ff faa2 	bl	8001066 <ILI9341_Draw_Hollow_Rectangle_Coord>

    HAL_Delay(1000);
 8001b22:	23fa      	movs	r3, #250	@ 0xfa
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	0018      	movs	r0, r3
 8001b28:	f000 fbc0 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <main+0x494>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7fe fec4 	bl	80008bc <ILI9341_Fill_Screen>

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 70, 60, WHITE); // рисует закрашеный прямоугольник (первые два аргумента это начальные координаты, а вторые два конечные)
 8001b34:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb0 <main+0x498>)
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	233c      	movs	r3, #60	@ 0x3c
 8001b3a:	2246      	movs	r2, #70	@ 0x46
 8001b3c:	2114      	movs	r1, #20
 8001b3e:	2014      	movs	r0, #20
 8001b40:	f7ff fb4e 	bl	80011e0 <ILI9341_Draw_Filled_Rectangle_Coord>

    HAL_Delay(1000);
 8001b44:	23fa      	movs	r3, #250	@ 0xfa
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fbaf 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001b4e:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <main+0x494>)
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7fe feb3 	bl	80008bc <ILI9341_Fill_Screen>

    ////////////////////////////////// ВЫВОД КАРТ�?НК�? �?З МАСС�?ВА //////////////////////////////////////////
    uint16_t size_img = sizeof(img_logo); // размер картинки в байтах (картинка лежит в файле img.h)
 8001b56:	2412      	movs	r4, #18
 8001b58:	193b      	adds	r3, r7, r4
 8001b5a:	22c8      	movs	r2, #200	@ 0xc8
 8001b5c:	0192      	lsls	r2, r2, #6
 8001b5e:	801a      	strh	r2, [r3, #0]

    ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img); // подробности см. в статье
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	4853      	ldr	r0, [pc, #332]	@ (8001cb4 <main+0x49c>)
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2350      	movs	r3, #80	@ 0x50
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2350      	movs	r3, #80	@ 0x50
 8001b6e:	221e      	movs	r2, #30
 8001b70:	211e      	movs	r1, #30
 8001b72:	f7ff fcc9 	bl	8001508 <ILI9341_Draw_Image>

    HAL_Delay(1000);
 8001b76:	23fa      	movs	r3, #250	@ 0xfa
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fb96 	bl	80022ac <HAL_Delay>

    //////////////////////////////////// смена ориентации экрана ///////////////////////////////////////

    ILI9341_Fill_Screen(MYFON);
 8001b80:	4b4a      	ldr	r3, [pc, #296]	@ (8001cac <main+0x494>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f7fe fe9a 	bl	80008bc <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7fe fcbd 	bl	8000508 <ILI9341_Set_Rotation>
    ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	4848      	ldr	r0, [pc, #288]	@ (8001cb4 <main+0x49c>)
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	2350      	movs	r3, #80	@ 0x50
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2350      	movs	r3, #80	@ 0x50
 8001b9c:	221e      	movs	r2, #30
 8001b9e:	211e      	movs	r1, #30
 8001ba0:	f7ff fcb2 	bl	8001508 <ILI9341_Draw_Image>
    ILI9341_WriteString(30, 120, "SCREEN_VERTICAL_1", Font_11x18, WHITE, MYFON);
 8001ba4:	4b44      	ldr	r3, [pc, #272]	@ (8001cb8 <main+0x4a0>)
 8001ba6:	4845      	ldr	r0, [pc, #276]	@ (8001cbc <main+0x4a4>)
 8001ba8:	4a40      	ldr	r2, [pc, #256]	@ (8001cac <main+0x494>)
 8001baa:	9202      	str	r2, [sp, #8]
 8001bac:	4a40      	ldr	r2, [pc, #256]	@ (8001cb0 <main+0x498>)
 8001bae:	9201      	str	r2, [sp, #4]
 8001bb0:	466a      	mov	r2, sp
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	6011      	str	r1, [r2, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0002      	movs	r2, r0
 8001bba:	2178      	movs	r1, #120	@ 0x78
 8001bbc:	201e      	movs	r0, #30
 8001bbe:	f7ff fda6 	bl	800170e <ILI9341_WriteString>
    HAL_Delay(1000);
 8001bc2:	23fa      	movs	r3, #250	@ 0xfa
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fb70 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001bcc:	4b37      	ldr	r3, [pc, #220]	@ (8001cac <main+0x494>)
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7fe fe74 	bl	80008bc <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7fe fc97 	bl	8000508 <ILI9341_Set_Rotation>
    ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 8001bda:	193b      	adds	r3, r7, r4
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	4835      	ldr	r0, [pc, #212]	@ (8001cb4 <main+0x49c>)
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2350      	movs	r3, #80	@ 0x50
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2350      	movs	r3, #80	@ 0x50
 8001be8:	221e      	movs	r2, #30
 8001bea:	211e      	movs	r1, #30
 8001bec:	f7ff fc8c 	bl	8001508 <ILI9341_Draw_Image>
    ILI9341_WriteString(30, 120, "SCREEN_HORIZONTAL_1", Font_11x18, WHITE, MYFON);
 8001bf0:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <main+0x4a0>)
 8001bf2:	4833      	ldr	r0, [pc, #204]	@ (8001cc0 <main+0x4a8>)
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <main+0x494>)
 8001bf6:	9202      	str	r2, [sp, #8]
 8001bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8001cb0 <main+0x498>)
 8001bfa:	9201      	str	r2, [sp, #4]
 8001bfc:	466a      	mov	r2, sp
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	6011      	str	r1, [r2, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0002      	movs	r2, r0
 8001c06:	2178      	movs	r1, #120	@ 0x78
 8001c08:	201e      	movs	r0, #30
 8001c0a:	f7ff fd80 	bl	800170e <ILI9341_WriteString>
    HAL_Delay(1000);
 8001c0e:	23fa      	movs	r3, #250	@ 0xfa
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	0018      	movs	r0, r3
 8001c14:	f000 fb4a 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <main+0x494>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fe4e 	bl	80008bc <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7fe fc71 	bl	8000508 <ILI9341_Set_Rotation>
    ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 8001c26:	193b      	adds	r3, r7, r4
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	4822      	ldr	r0, [pc, #136]	@ (8001cb4 <main+0x49c>)
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2350      	movs	r3, #80	@ 0x50
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2350      	movs	r3, #80	@ 0x50
 8001c34:	221e      	movs	r2, #30
 8001c36:	211e      	movs	r1, #30
 8001c38:	f7ff fc66 	bl	8001508 <ILI9341_Draw_Image>
    ILI9341_WriteString(30, 120, "SCREEN_VERTICAL_2", Font_11x18, WHITE, MYFON);
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <main+0x4a0>)
 8001c3e:	4821      	ldr	r0, [pc, #132]	@ (8001cc4 <main+0x4ac>)
 8001c40:	4a1a      	ldr	r2, [pc, #104]	@ (8001cac <main+0x494>)
 8001c42:	9202      	str	r2, [sp, #8]
 8001c44:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <main+0x498>)
 8001c46:	9201      	str	r2, [sp, #4]
 8001c48:	466a      	mov	r2, sp
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	6011      	str	r1, [r2, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0002      	movs	r2, r0
 8001c52:	2178      	movs	r1, #120	@ 0x78
 8001c54:	201e      	movs	r0, #30
 8001c56:	f7ff fd5a 	bl	800170e <ILI9341_WriteString>
    HAL_Delay(1000);
 8001c5a:	23fa      	movs	r3, #250	@ 0xfa
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fb24 	bl	80022ac <HAL_Delay>

    ILI9341_Fill_Screen(MYFON);
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <main+0x494>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fe28 	bl	80008bc <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7fe fc4b 	bl	8000508 <ILI9341_Set_Rotation>
    ILI9341_Draw_Image(img_logo, 30, 30, 80, 80, size_img);
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	480f      	ldr	r0, [pc, #60]	@ (8001cb4 <main+0x49c>)
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	2350      	movs	r3, #80	@ 0x50
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2350      	movs	r3, #80	@ 0x50
 8001c80:	221e      	movs	r2, #30
 8001c82:	211e      	movs	r1, #30
 8001c84:	f7ff fc40 	bl	8001508 <ILI9341_Draw_Image>
    ILI9341_WriteString(30, 120, "SCREEN_HORIZONTAL_2", Font_11x18, WHITE, MYFON);
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <main+0x4a0>)
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <main+0x4b0>)
 8001c8c:	4a07      	ldr	r2, [pc, #28]	@ (8001cac <main+0x494>)
 8001c8e:	9202      	str	r2, [sp, #8]
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <main+0x498>)
 8001c92:	9201      	str	r2, [sp, #4]
 8001c94:	466a      	mov	r2, sp
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	2178      	movs	r1, #120	@ 0x78
 8001ca0:	201e      	movs	r0, #30
 8001ca2:	f7ff fd34 	bl	800170e <ILI9341_WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	e7fd      	b.n	8001ca6 <main+0x48e>
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	00002965 	.word	0x00002965
 8001cb0:	0000ffff 	.word	0x0000ffff
 8001cb4:	0800620c 	.word	0x0800620c
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	080039a8 	.word	0x080039a8
 8001cc0:	080039bc 	.word	0x080039bc
 8001cc4:	080039d0 	.word	0x080039d0
 8001cc8:	080039e4 	.word	0x080039e4

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b091      	sub	sp, #68	@ 0x44
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	2410      	movs	r4, #16
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	2330      	movs	r3, #48	@ 0x30
 8001cda:	001a      	movs	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f001 fe25 	bl	800392c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce2:	003b      	movs	r3, r7
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	001a      	movs	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	f001 fe1e 	bl	800392c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf0:	0021      	movs	r1, r4
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2210      	movs	r2, #16
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2202      	movs	r2, #2
 8001d08:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	22a0      	movs	r2, #160	@ 0xa0
 8001d14:	0392      	lsls	r2, r2, #14
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 fd29 	bl	8002778 <HAL_RCC_OscConfig>
 8001d26:	1e03      	subs	r3, r0, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d2a:	f000 f92b 	bl	8001f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	003b      	movs	r3, r7
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d34:	003b      	movs	r3, r7
 8001d36:	2202      	movs	r2, #2
 8001d38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	003b      	movs	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d40:	003b      	movs	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d46:	003b      	movs	r3, r7
 8001d48:	2101      	movs	r1, #1
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f001 f82e 	bl	8002dac <HAL_RCC_ClockConfig>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d54:	f000 f916 	bl	8001f84 <Error_Handler>
  }
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b011      	add	sp, #68	@ 0x44
 8001d5e:	bd90      	pop	{r4, r7, pc}

08001d60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d66:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <MX_SPI1_Init+0x78>)
 8001d68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d6c:	2282      	movs	r2, #130	@ 0x82
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d78:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d7a:	22e0      	movs	r2, #224	@ 0xe0
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d96:	2208      	movs	r2, #8
 8001d98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001dae:	2207      	movs	r2, #7
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001dba:	2208      	movs	r2, #8
 8001dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <MX_SPI1_Init+0x74>)
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f001 f937 	bl	8003034 <HAL_SPI_Init>
 8001dc6:	1e03      	subs	r3, r0, #0
 8001dc8:	d001      	beq.n	8001dce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 f8db 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000044 	.word	0x20000044
 8001dd8:	40013000 	.word	0x40013000

08001ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <MX_USART2_UART_Init+0x5c>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001de6:	4b13      	ldr	r3, [pc, #76]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001de8:	2296      	movs	r2, #150	@ 0x96
 8001dea:	0212      	lsls	r2, r2, #8
 8001dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <MX_USART2_UART_Init+0x58>)
 8001e20:	0018      	movs	r0, r3
 8001e22:	f001 f9bf 	bl	80031a4 <HAL_UART_Init>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e2a:	f000 f8ab 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200000a8 	.word	0x200000a8
 8001e38:	40004400 	.word	0x40004400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08b      	sub	sp, #44	@ 0x2c
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	2414      	movs	r4, #20
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	0018      	movs	r0, r3
 8001e48:	2314      	movs	r3, #20
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f001 fd6d 	bl	800392c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	4b49      	ldr	r3, [pc, #292]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	4b48      	ldr	r3, [pc, #288]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0309      	lsls	r1, r1, #12
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	615a      	str	r2, [r3, #20]
 8001e60:	4b45      	ldr	r3, [pc, #276]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	031b      	lsls	r3, r3, #12
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6e:	4b42      	ldr	r3, [pc, #264]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e74:	2180      	movs	r1, #128	@ 0x80
 8001e76:	03c9      	lsls	r1, r1, #15
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	03db      	lsls	r3, r3, #15
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	0289      	lsls	r1, r1, #10
 8001e94:	430a      	orrs	r2, r1
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	4b37      	ldr	r3, [pc, #220]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	2380      	movs	r3, #128	@ 0x80
 8001e9e:	029b      	lsls	r3, r3, #10
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b34      	ldr	r3, [pc, #208]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	4b33      	ldr	r3, [pc, #204]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	02c9      	lsls	r1, r1, #11
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	615a      	str	r2, [r3, #20]
 8001eb4:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001eb6:	695a      	ldr	r2, [r3, #20]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	02db      	lsls	r3, r3, #11
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_CS_Pin|TFT_RST_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001ec2:	23e4      	movs	r3, #228	@ 0xe4
 8001ec4:	00d9      	lsls	r1, r3, #3
 8001ec6:	2390      	movs	r3, #144	@ 0x90
 8001ec8:	05db      	lsls	r3, r3, #23
 8001eca:	2200      	movs	r2, #0
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 fc35 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f7c <MX_GPIO_Init+0x140>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	@ 0x80
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 fc2f 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ede:	193b      	adds	r3, r7, r4
 8001ee0:	2280      	movs	r2, #128	@ 0x80
 8001ee2:	0192      	lsls	r2, r2, #6
 8001ee4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ee6:	193b      	adds	r3, r7, r4
 8001ee8:	2284      	movs	r2, #132	@ 0x84
 8001eea:	0392      	lsls	r2, r2, #14
 8001eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <MX_GPIO_Init+0x140>)
 8001ef8:	0019      	movs	r1, r3
 8001efa:	0010      	movs	r0, r2
 8001efc:	f000 faae 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TFT_CS_Pin TFT_RST_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TFT_CS_Pin|TFT_RST_Pin|TOUCH_CS_Pin;
 8001f00:	0021      	movs	r1, r4
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	22e4      	movs	r2, #228	@ 0xe4
 8001f06:	00d2      	lsls	r2, r2, #3
 8001f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	000c      	movs	r4, r1
 8001f0c:	193b      	adds	r3, r7, r4
 8001f0e:	2201      	movs	r2, #1
 8001f10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	193b      	adds	r3, r7, r4
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	193b      	adds	r3, r7, r4
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	193a      	adds	r2, r7, r4
 8001f20:	2390      	movs	r3, #144	@ 0x90
 8001f22:	05db      	lsls	r3, r3, #23
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fa98 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2201      	movs	r2, #1
 8001f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 8001f44:	193b      	adds	r3, r7, r4
 8001f46:	4a0d      	ldr	r2, [pc, #52]	@ (8001f7c <MX_GPIO_Init+0x140>)
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f000 fa86 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8001f50:	0021      	movs	r1, r4
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	2220      	movs	r2, #32
 8001f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <MX_GPIO_Init+0x144>)
 8001f68:	0019      	movs	r1, r3
 8001f6a:	0010      	movs	r0, r2
 8001f6c:	f000 fa76 	bl	800245c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f70:	46c0      	nop			@ (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b00b      	add	sp, #44	@ 0x2c
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000400 	.word	0x48000400

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	e7fd      	b.n	8001f8c <Error_Handler+0x8>

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_MspInit+0x44>)
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_MspInit+0x44>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	619a      	str	r2, [r3, #24]
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_MspInit+0x44>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_MspInit+0x44>)
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_MspInit+0x44>)
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0549      	lsls	r1, r1, #21
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	61da      	str	r2, [r3, #28]
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_MspInit+0x44>)
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	055b      	lsls	r3, r3, #21
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b08b      	sub	sp, #44	@ 0x2c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	2414      	movs	r4, #20
 8001fe2:	193b      	adds	r3, r7, r4
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	2314      	movs	r3, #20
 8001fe8:	001a      	movs	r2, r3
 8001fea:	2100      	movs	r1, #0
 8001fec:	f001 fc9e 	bl	800392c <memset>
  if(hspi->Instance==SPI1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80020b0 <HAL_SPI_MspInit+0xd8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d155      	bne.n	80020a6 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8002000:	2180      	movs	r1, #128	@ 0x80
 8002002:	0149      	lsls	r1, r1, #5
 8002004:	430a      	orrs	r2, r1
 8002006:	619a      	str	r2, [r3, #24]
 8002008:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 800200a:	699a      	ldr	r2, [r3, #24]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	015b      	lsls	r3, r3, #5
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0289      	lsls	r1, r1, #10
 8002020:	430a      	orrs	r2, r1
 8002022:	615a      	str	r2, [r3, #20]
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	4b1f      	ldr	r3, [pc, #124]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	02c9      	lsls	r1, r1, #11
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]
 8002040:	4b1c      	ldr	r3, [pc, #112]	@ (80020b4 <HAL_SPI_MspInit+0xdc>)
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	02db      	lsls	r3, r3, #11
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204e:	193b      	adds	r3, r7, r4
 8002050:	22c0      	movs	r2, #192	@ 0xc0
 8002052:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	193b      	adds	r3, r7, r4
 8002056:	2202      	movs	r2, #2
 8002058:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	193b      	adds	r3, r7, r4
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002060:	193b      	adds	r3, r7, r4
 8002062:	2203      	movs	r2, #3
 8002064:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002066:	193b      	adds	r3, r7, r4
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	193a      	adds	r2, r7, r4
 800206e:	2390      	movs	r3, #144	@ 0x90
 8002070:	05db      	lsls	r3, r3, #23
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f9f1 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800207a:	0021      	movs	r1, r4
 800207c:	187b      	adds	r3, r7, r1
 800207e:	2208      	movs	r2, #8
 8002080:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	187b      	adds	r3, r7, r1
 8002084:	2202      	movs	r2, #2
 8002086:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	187b      	adds	r3, r7, r1
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208e:	187b      	adds	r3, r7, r1
 8002090:	2203      	movs	r2, #3
 8002092:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	187b      	adds	r3, r7, r1
 800209c:	4a06      	ldr	r2, [pc, #24]	@ (80020b8 <HAL_SPI_MspInit+0xe0>)
 800209e:	0019      	movs	r1, r3
 80020a0:	0010      	movs	r0, r2
 80020a2:	f000 f9db 	bl	800245c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b00b      	add	sp, #44	@ 0x2c
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	48000400 	.word	0x48000400

080020bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b08b      	sub	sp, #44	@ 0x2c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	2414      	movs	r4, #20
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	0018      	movs	r0, r3
 80020ca:	2314      	movs	r3, #20
 80020cc:	001a      	movs	r2, r3
 80020ce:	2100      	movs	r1, #0
 80020d0:	f001 fc2c 	bl	800392c <memset>
  if(huart->Instance==USART2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_UART_MspInit+0x90>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d132      	bne.n	8002144 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020de:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <HAL_UART_MspInit+0x94>)
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_UART_MspInit+0x94>)
 80020e4:	2180      	movs	r1, #128	@ 0x80
 80020e6:	0289      	lsls	r1, r1, #10
 80020e8:	430a      	orrs	r2, r1
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_UART_MspInit+0x94>)
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_UART_MspInit+0x94>)
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	4b14      	ldr	r3, [pc, #80]	@ (8002150 <HAL_UART_MspInit+0x94>)
 8002100:	2180      	movs	r1, #128	@ 0x80
 8002102:	0289      	lsls	r1, r1, #10
 8002104:	430a      	orrs	r2, r1
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_UART_MspInit+0x94>)
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002116:	0021      	movs	r1, r4
 8002118:	187b      	adds	r3, r7, r1
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2202      	movs	r2, #2
 8002122:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2201      	movs	r2, #1
 8002134:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	187a      	adds	r2, r7, r1
 8002138:	2390      	movs	r3, #144	@ 0x90
 800213a:	05db      	lsls	r3, r3, #23
 800213c:	0011      	movs	r1, r2
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f98c 	bl	800245c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002144:	46c0      	nop			@ (mov r8, r8)
 8002146:	46bd      	mov	sp, r7
 8002148:	b00b      	add	sp, #44	@ 0x2c
 800214a:	bd90      	pop	{r4, r7, pc}
 800214c:	40004400 	.word	0x40004400
 8002150:	40021000 	.word	0x40021000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	e7fd      	b.n	8002158 <NMI_Handler+0x4>

0800215c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	e7fd      	b.n	8002160 <HardFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 f87a 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002190:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002192:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002194:	f7ff fff7 	bl	8002186 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	@ (80021cc <LoopForever+0x6>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <LoopForever+0xe>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	@ (80021dc <LoopForever+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021be:	f001 fbbd 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c2:	f7ff fb29 	bl	8001818 <main>

080021c6 <LoopForever>:

LoopForever:
    b LoopForever
 80021c6:	e7fe      	b.n	80021c6 <LoopForever>
  ldr   r0, =_estack
 80021c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80021d4:	0800944c 	.word	0x0800944c
  ldr r2, =_sbss
 80021d8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80021dc:	20000134 	.word	0x20000134

080021e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_IRQHandler>
	...

080021e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_Init+0x24>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_Init+0x24>)
 80021ee:	2110      	movs	r1, #16
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021f4:	2000      	movs	r0, #0
 80021f6:	f000 f809 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fa:	f7ff fec9 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			@ (mov r8, r8)
 8002208:	40022000 	.word	0x40022000

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b14      	ldr	r3, [pc, #80]	@ (8002268 <HAL_InitTick+0x5c>)
 8002216:	681c      	ldr	r4, [r3, #0]
 8002218:	4b14      	ldr	r3, [pc, #80]	@ (800226c <HAL_InitTick+0x60>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	0019      	movs	r1, r3
 800221e:	23fa      	movs	r3, #250	@ 0xfa
 8002220:	0098      	lsls	r0, r3, #2
 8002222:	f7fd ff71 	bl	8000108 <__udivsi3>
 8002226:	0003      	movs	r3, r0
 8002228:	0019      	movs	r1, r3
 800222a:	0020      	movs	r0, r4
 800222c:	f7fd ff6c 	bl	8000108 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f905 	bl	8002442 <HAL_SYSTICK_Config>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e00f      	b.n	8002260 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d80b      	bhi.n	800225e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	2301      	movs	r3, #1
 800224a:	425b      	negs	r3, r3
 800224c:	2200      	movs	r2, #0
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f8e2 	bl	8002418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_InitTick+0x64>)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b003      	add	sp, #12
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	2000001c 	.word	0x2000001c
 800226c:	20000024 	.word	0x20000024
 8002270:	20000020 	.word	0x20000020

08002274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_IncTick+0x1c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	001a      	movs	r2, r3
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_IncTick+0x20>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	18d2      	adds	r2, r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_IncTick+0x20>)
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	20000024 	.word	0x20000024
 8002294:	20000130 	.word	0x20000130

08002298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b02      	ldr	r3, [pc, #8]	@ (80022a8 <HAL_GetTick+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	20000130 	.word	0x20000130

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fff0 	bl	8002298 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3301      	adds	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	001a      	movs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	f7ff ffe0 	bl	8002298 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b004      	add	sp, #16
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	20000024 	.word	0x20000024

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	0002      	movs	r2, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b7f      	cmp	r3, #127	@ 0x7f
 8002308:	d828      	bhi.n	800235c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800230a:	4a2f      	ldr	r2, [pc, #188]	@ (80023c8 <__NVIC_SetPriority+0xd4>)
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b25b      	sxtb	r3, r3
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	33c0      	adds	r3, #192	@ 0xc0
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	589b      	ldr	r3, [r3, r2]
 800231a:	1dfa      	adds	r2, r7, #7
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	0011      	movs	r1, r2
 8002320:	2203      	movs	r2, #3
 8002322:	400a      	ands	r2, r1
 8002324:	00d2      	lsls	r2, r2, #3
 8002326:	21ff      	movs	r1, #255	@ 0xff
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	43d2      	mvns	r2, r2
 800232e:	401a      	ands	r2, r3
 8002330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	22ff      	movs	r2, #255	@ 0xff
 8002338:	401a      	ands	r2, r3
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	2303      	movs	r3, #3
 8002342:	4003      	ands	r3, r0
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002348:	481f      	ldr	r0, [pc, #124]	@ (80023c8 <__NVIC_SetPriority+0xd4>)
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	430a      	orrs	r2, r1
 8002354:	33c0      	adds	r3, #192	@ 0xc0
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800235a:	e031      	b.n	80023c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235c:	4a1b      	ldr	r2, [pc, #108]	@ (80023cc <__NVIC_SetPriority+0xd8>)
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0019      	movs	r1, r3
 8002364:	230f      	movs	r3, #15
 8002366:	400b      	ands	r3, r1
 8002368:	3b08      	subs	r3, #8
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3306      	adds	r3, #6
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	18d3      	adds	r3, r2, r3
 8002372:	3304      	adds	r3, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1dfa      	adds	r2, r7, #7
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	0011      	movs	r1, r2
 800237c:	2203      	movs	r2, #3
 800237e:	400a      	ands	r2, r1
 8002380:	00d2      	lsls	r2, r2, #3
 8002382:	21ff      	movs	r1, #255	@ 0xff
 8002384:	4091      	lsls	r1, r2
 8002386:	000a      	movs	r2, r1
 8002388:	43d2      	mvns	r2, r2
 800238a:	401a      	ands	r2, r3
 800238c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	22ff      	movs	r2, #255	@ 0xff
 8002394:	401a      	ands	r2, r3
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	0018      	movs	r0, r3
 800239c:	2303      	movs	r3, #3
 800239e:	4003      	ands	r3, r0
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a4:	4809      	ldr	r0, [pc, #36]	@ (80023cc <__NVIC_SetPriority+0xd8>)
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	001c      	movs	r4, r3
 80023ac:	230f      	movs	r3, #15
 80023ae:	4023      	ands	r3, r4
 80023b0:	3b08      	subs	r3, #8
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	430a      	orrs	r2, r1
 80023b6:	3306      	adds	r3, #6
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	18c3      	adds	r3, r0, r3
 80023bc:	3304      	adds	r3, #4
 80023be:	601a      	str	r2, [r3, #0]
}
 80023c0:	46c0      	nop			@ (mov r8, r8)
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b003      	add	sp, #12
 80023c6:	bd90      	pop	{r4, r7, pc}
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	045b      	lsls	r3, r3, #17
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d301      	bcc.n	80023e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e4:	2301      	movs	r3, #1
 80023e6:	e010      	b.n	800240a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <SysTick_Config+0x44>)
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	3a01      	subs	r2, #1
 80023ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f0:	2301      	movs	r3, #1
 80023f2:	425b      	negs	r3, r3
 80023f4:	2103      	movs	r1, #3
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff ff7c 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x44>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x44>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	210f      	movs	r1, #15
 8002424:	187b      	adds	r3, r7, r1
 8002426:	1c02      	adds	r2, r0, #0
 8002428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	187b      	adds	r3, r7, r1
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b25b      	sxtb	r3, r3
 8002432:	0011      	movs	r1, r2
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	46bd      	mov	sp, r7
 800243e:	b004      	add	sp, #16
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ffbf 	bl	80023d0 <SysTick_Config>
 8002452:	0003      	movs	r3, r0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e14f      	b.n	800270c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4091      	lsls	r1, r2
 8002476:	000a      	movs	r2, r1
 8002478:	4013      	ands	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d100      	bne.n	8002484 <HAL_GPIO_Init+0x28>
 8002482:	e140      	b.n	8002706 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	4013      	ands	r3, r2
 800248c:	2b01      	cmp	r3, #1
 800248e:	d005      	beq.n	800249c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002498:	2b02      	cmp	r3, #2
 800249a:	d130      	bne.n	80024fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	43da      	mvns	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4013      	ands	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	409a      	lsls	r2, r3
 80024be:	0013      	movs	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d2:	2201      	movs	r2, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	43da      	mvns	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	2201      	movs	r2, #1
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	2b03      	cmp	r3, #3
 8002508:	d017      	beq.n	800253a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	43da      	mvns	r2, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	0013      	movs	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d123      	bne.n	800258e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	58d3      	ldr	r3, [r2, r3]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2207      	movs	r2, #7
 8002558:	4013      	ands	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	43da      	mvns	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2107      	movs	r1, #7
 8002572:	400b      	ands	r3, r1
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	08da      	lsrs	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3208      	adds	r2, #8
 8002588:	0092      	lsls	r2, r2, #2
 800258a:	6939      	ldr	r1, [r7, #16]
 800258c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	43da      	mvns	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2203      	movs	r2, #3
 80025ac:	401a      	ands	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	409a      	lsls	r2, r3
 80025b4:	0013      	movs	r3, r2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	23c0      	movs	r3, #192	@ 0xc0
 80025c8:	029b      	lsls	r3, r3, #10
 80025ca:	4013      	ands	r3, r2
 80025cc:	d100      	bne.n	80025d0 <HAL_GPIO_Init+0x174>
 80025ce:	e09a      	b.n	8002706 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	4b54      	ldr	r3, [pc, #336]	@ (8002724 <HAL_GPIO_Init+0x2c8>)
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	4b53      	ldr	r3, [pc, #332]	@ (8002724 <HAL_GPIO_Init+0x2c8>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	430a      	orrs	r2, r1
 80025da:	619a      	str	r2, [r3, #24]
 80025dc:	4b51      	ldr	r3, [pc, #324]	@ (8002724 <HAL_GPIO_Init+0x2c8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2201      	movs	r2, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002728 <HAL_GPIO_Init+0x2cc>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	589b      	ldr	r3, [r3, r2]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2203      	movs	r2, #3
 80025fa:	4013      	ands	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	409a      	lsls	r2, r3
 8002602:	0013      	movs	r3, r2
 8002604:	43da      	mvns	r2, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	2390      	movs	r3, #144	@ 0x90
 8002610:	05db      	lsls	r3, r3, #23
 8002612:	429a      	cmp	r2, r3
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x1e2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a44      	ldr	r2, [pc, #272]	@ (800272c <HAL_GPIO_Init+0x2d0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x1de>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a43      	ldr	r2, [pc, #268]	@ (8002730 <HAL_GPIO_Init+0x2d4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x1da>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a42      	ldr	r2, [pc, #264]	@ (8002734 <HAL_GPIO_Init+0x2d8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x1d6>
 800262e:	2303      	movs	r3, #3
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x1e4>
 8002632:	2305      	movs	r3, #5
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x1e4>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x1e4>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x1e4>
 800263e:	2300      	movs	r3, #0
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	2103      	movs	r1, #3
 8002644:	400a      	ands	r2, r1
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	@ (8002728 <HAL_GPIO_Init+0x2cc>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43da      	mvns	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	035b      	lsls	r3, r3, #13
 8002676:	4013      	ands	r3, r2
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002682:	4b2d      	ldr	r3, [pc, #180]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002688:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43da      	mvns	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	039b      	lsls	r3, r3, #14
 80026a0:	4013      	ands	r3, r2
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80026ac:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80026b2:	4b21      	ldr	r3, [pc, #132]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	4013      	ands	r3, r2
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026d6:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43da      	mvns	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	025b      	lsls	r3, r3, #9
 80026f4:	4013      	ands	r3, r2
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_GPIO_Init+0x2dc>)
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	40da      	lsrs	r2, r3
 8002714:	1e13      	subs	r3, r2, #0
 8002716:	d000      	beq.n	800271a <HAL_GPIO_Init+0x2be>
 8002718:	e6a8      	b.n	800246c <HAL_GPIO_Init+0x10>
  } 
}
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	46c0      	nop			@ (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b006      	add	sp, #24
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000
 800272c:	48000400 	.word	0x48000400
 8002730:	48000800 	.word	0x48000800
 8002734:	48000c00 	.word	0x48000c00
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	0008      	movs	r0, r1
 8002746:	0011      	movs	r1, r2
 8002748:	1cbb      	adds	r3, r7, #2
 800274a:	1c02      	adds	r2, r0, #0
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	1c7b      	adds	r3, r7, #1
 8002750:	1c0a      	adds	r2, r1, #0
 8002752:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002754:	1c7b      	adds	r3, r7, #1
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800275c:	1cbb      	adds	r3, r7, #2
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002764:	e003      	b.n	800276e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002766:	1cbb      	adds	r3, r7, #2
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b002      	add	sp, #8
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e301      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x1e>
 8002794:	e08d      	b.n	80028b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002796:	4bc3      	ldr	r3, [pc, #780]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	220c      	movs	r2, #12
 800279c:	4013      	ands	r3, r2
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d00e      	beq.n	80027c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027a2:	4bc0      	ldr	r3, [pc, #768]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	220c      	movs	r2, #12
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x64>
 80027ae:	4bbd      	ldr	r3, [pc, #756]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	025b      	lsls	r3, r3, #9
 80027b6:	401a      	ands	r2, r3
 80027b8:	2380      	movs	r3, #128	@ 0x80
 80027ba:	025b      	lsls	r3, r3, #9
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10d      	bne.n	80027dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	4bb8      	ldr	r3, [pc, #736]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	4013      	ands	r3, r2
 80027ca:	d100      	bne.n	80027ce <HAL_RCC_OscConfig+0x56>
 80027cc:	e070      	b.n	80028b0 <HAL_RCC_OscConfig+0x138>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d000      	beq.n	80027d8 <HAL_RCC_OscConfig+0x60>
 80027d6:	e06b      	b.n	80028b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e2d8      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x7c>
 80027e4:	4baf      	ldr	r3, [pc, #700]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4bae      	ldr	r3, [pc, #696]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	0249      	lsls	r1, r1, #9
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e02f      	b.n	8002854 <HAL_RCC_OscConfig+0xdc>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x9e>
 80027fc:	4ba9      	ldr	r3, [pc, #676]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4ba8      	ldr	r3, [pc, #672]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002802:	49a9      	ldr	r1, [pc, #676]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002804:	400a      	ands	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	4ba6      	ldr	r3, [pc, #664]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4ba5      	ldr	r3, [pc, #660]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800280e:	49a7      	ldr	r1, [pc, #668]	@ (8002aac <HAL_RCC_OscConfig+0x334>)
 8002810:	400a      	ands	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e01e      	b.n	8002854 <HAL_RCC_OscConfig+0xdc>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b05      	cmp	r3, #5
 800281c:	d10e      	bne.n	800283c <HAL_RCC_OscConfig+0xc4>
 800281e:	4ba1      	ldr	r3, [pc, #644]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002824:	2180      	movs	r1, #128	@ 0x80
 8002826:	02c9      	lsls	r1, r1, #11
 8002828:	430a      	orrs	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b9c      	ldr	r3, [pc, #624]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002832:	2180      	movs	r1, #128	@ 0x80
 8002834:	0249      	lsls	r1, r1, #9
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xdc>
 800283c:	4b99      	ldr	r3, [pc, #612]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b98      	ldr	r3, [pc, #608]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002842:	4999      	ldr	r1, [pc, #612]	@ (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4b96      	ldr	r3, [pc, #600]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b95      	ldr	r3, [pc, #596]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800284e:	4997      	ldr	r1, [pc, #604]	@ (8002aac <HAL_RCC_OscConfig+0x334>)
 8002850:	400a      	ands	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d014      	beq.n	8002886 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7ff fd1c 	bl	8002298 <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002866:	f7ff fd17 	bl	8002298 <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b64      	cmp	r3, #100	@ 0x64
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e28a      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002878:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	2380      	movs	r3, #128	@ 0x80
 800287e:	029b      	lsls	r3, r3, #10
 8002880:	4013      	ands	r3, r2
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0xee>
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7ff fd07 	bl	8002298 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7ff fd02 	bl	8002298 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e275      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b80      	ldr	r3, [pc, #512]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	@ 0x80
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	4013      	ands	r3, r2
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x118>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2202      	movs	r2, #2
 80028b8:	4013      	ands	r3, r2
 80028ba:	d100      	bne.n	80028be <HAL_RCC_OscConfig+0x146>
 80028bc:	e069      	b.n	8002992 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028be:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	220c      	movs	r2, #12
 80028c4:	4013      	ands	r3, r2
 80028c6:	d00b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028c8:	4b76      	ldr	r3, [pc, #472]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	220c      	movs	r2, #12
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d11c      	bne.n	800290e <HAL_RCC_OscConfig+0x196>
 80028d4:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	025b      	lsls	r3, r3, #9
 80028dc:	4013      	ands	r3, r2
 80028de:	d116      	bne.n	800290e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e0:	4b70      	ldr	r3, [pc, #448]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e24b      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	22f8      	movs	r2, #248	@ 0xf8
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	00da      	lsls	r2, r3, #3
 8002906:	4b67      	ldr	r3, [pc, #412]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290c:	e041      	b.n	8002992 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d024      	beq.n	8002960 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002916:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	4b62      	ldr	r3, [pc, #392]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7ff fcb9 	bl	8002298 <HAL_GetTick>
 8002926:	0003      	movs	r3, r0
 8002928:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7ff fcb4 	bl	8002298 <HAL_GetTick>
 8002930:	0002      	movs	r2, r0
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e227      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2202      	movs	r2, #2
 8002944:	4013      	ands	r3, r2
 8002946:	d0f1      	beq.n	800292c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002948:	4b56      	ldr	r3, [pc, #344]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	22f8      	movs	r2, #248	@ 0xf8
 800294e:	4393      	bics	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00da      	lsls	r2, r3, #3
 8002958:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800295a:	430a      	orrs	r2, r1
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002966:	2101      	movs	r1, #1
 8002968:	438a      	bics	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fc94 	bl	8002298 <HAL_GetTick>
 8002970:	0003      	movs	r3, r0
 8002972:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff fc8f 	bl	8002298 <HAL_GetTick>
 800297a:	0002      	movs	r2, r0
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e202      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002988:	4b46      	ldr	r3, [pc, #280]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1f1      	bne.n	8002976 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2208      	movs	r2, #8
 8002998:	4013      	ands	r3, r2
 800299a:	d036      	beq.n	8002a0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a4:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80029a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a8:	4b3e      	ldr	r3, [pc, #248]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7ff fc72 	bl	8002298 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7ff fc6d 	bl	8002298 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1e0      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029cc:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d0f1      	beq.n	80029ba <HAL_RCC_OscConfig+0x242>
 80029d6:	e018      	b.n	8002a0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80029da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029dc:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 80029de:	2101      	movs	r1, #1
 80029e0:	438a      	bics	r2, r1
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7ff fc58 	bl	8002298 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7ff fc53 	bl	8002298 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e1c6      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	2202      	movs	r2, #2
 8002a06:	4013      	ands	r3, r2
 8002a08:	d1f1      	bne.n	80029ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4013      	ands	r3, r2
 8002a12:	d100      	bne.n	8002a16 <HAL_RCC_OscConfig+0x29e>
 8002a14:	e0b4      	b.n	8002b80 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	201f      	movs	r0, #31
 8002a18:	183b      	adds	r3, r7, r0
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	055b      	lsls	r3, r3, #21
 8002a26:	4013      	ands	r3, r2
 8002a28:	d110      	bne.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a30:	2180      	movs	r1, #128	@ 0x80
 8002a32:	0549      	lsls	r1, r1, #21
 8002a34:	430a      	orrs	r2, r1
 8002a36:	61da      	str	r2, [r3, #28]
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	2380      	movs	r3, #128	@ 0x80
 8002a3e:	055b      	lsls	r3, r3, #21
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a46:	183b      	adds	r3, r7, r0
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d11a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a5e:	2180      	movs	r1, #128	@ 0x80
 8002a60:	0049      	lsls	r1, r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7ff fc17 	bl	8002298 <HAL_GetTick>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a70:	f7ff fc12 	bl	8002298 <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	@ 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e185      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10e      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x33c>
 8002a96:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	4b02      	ldr	r3, [pc, #8]	@ (8002aa4 <HAL_RCC_OscConfig+0x32c>)
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	621a      	str	r2, [r3, #32]
 8002aa2:	e035      	b.n	8002b10 <HAL_RCC_OscConfig+0x398>
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	fffeffff 	.word	0xfffeffff
 8002aac:	fffbffff 	.word	0xfffbffff
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x35e>
 8002abc:	4bb6      	ldr	r3, [pc, #728]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	4bb5      	ldr	r3, [pc, #724]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	621a      	str	r2, [r3, #32]
 8002ac8:	4bb3      	ldr	r3, [pc, #716]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	4bb2      	ldr	r3, [pc, #712]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ace:	2104      	movs	r1, #4
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	621a      	str	r2, [r3, #32]
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x398>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x380>
 8002ade:	4bae      	ldr	r3, [pc, #696]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	4bad      	ldr	r3, [pc, #692]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	621a      	str	r2, [r3, #32]
 8002aea:	4bab      	ldr	r3, [pc, #684]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	4baa      	ldr	r3, [pc, #680]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	621a      	str	r2, [r3, #32]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x398>
 8002af8:	4ba7      	ldr	r3, [pc, #668]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	4ba6      	ldr	r3, [pc, #664]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	438a      	bics	r2, r1
 8002b02:	621a      	str	r2, [r3, #32]
 8002b04:	4ba4      	ldr	r3, [pc, #656]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b06:	6a1a      	ldr	r2, [r3, #32]
 8002b08:	4ba3      	ldr	r3, [pc, #652]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d014      	beq.n	8002b42 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7ff fbbe 	bl	8002298 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e009      	b.n	8002b36 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7ff fbb9 	bl	8002298 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	4a9b      	ldr	r2, [pc, #620]	@ (8002d9c <HAL_RCC_OscConfig+0x624>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e12b      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b98      	ldr	r3, [pc, #608]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x3aa>
 8002b40:	e013      	b.n	8002b6a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7ff fba9 	bl	8002298 <HAL_GetTick>
 8002b46:	0003      	movs	r3, r0
 8002b48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e009      	b.n	8002b60 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7ff fba4 	bl	8002298 <HAL_GetTick>
 8002b50:	0002      	movs	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	4a91      	ldr	r2, [pc, #580]	@ (8002d9c <HAL_RCC_OscConfig+0x624>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e116      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b60:	4b8d      	ldr	r3, [pc, #564]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	2202      	movs	r2, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b6a:	231f      	movs	r3, #31
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b76:	69da      	ldr	r2, [r3, #28]
 8002b78:	4b87      	ldr	r3, [pc, #540]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b7a:	4989      	ldr	r1, [pc, #548]	@ (8002da0 <HAL_RCC_OscConfig+0x628>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2210      	movs	r2, #16
 8002b86:	4013      	ands	r3, r2
 8002b88:	d063      	beq.n	8002c52 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d12a      	bne.n	8002be8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b92:	4b81      	ldr	r3, [pc, #516]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b96:	4b80      	ldr	r3, [pc, #512]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002b98:	2104      	movs	r1, #4
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002baa:	f7ff fb75 	bl	8002298 <HAL_GetTick>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bb4:	f7ff fb70 	bl	8002298 <HAL_GetTick>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0e3      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bc6:	4b74      	ldr	r3, [pc, #464]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d0f1      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bd0:	4b71      	ldr	r3, [pc, #452]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	22f8      	movs	r2, #248	@ 0xf8
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	00da      	lsls	r2, r3, #3
 8002be0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002be6:	e034      	b.n	8002c52 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	3305      	adds	r3, #5
 8002bee:	d111      	bne.n	8002c14 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bf0:	4b69      	ldr	r3, [pc, #420]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002bf6:	2104      	movs	r1, #4
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bfc:	4b66      	ldr	r3, [pc, #408]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	22f8      	movs	r2, #248	@ 0xf8
 8002c02:	4393      	bics	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	00da      	lsls	r2, r3, #3
 8002c0c:	4b62      	ldr	r3, [pc, #392]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c12:	e01e      	b.n	8002c52 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c14:	4b60      	ldr	r3, [pc, #384]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c18:	4b5f      	ldr	r3, [pc, #380]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c1a:	2104      	movs	r1, #4
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c20:	4b5d      	ldr	r3, [pc, #372]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c24:	4b5c      	ldr	r3, [pc, #368]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	438a      	bics	r2, r1
 8002c2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7ff fb34 	bl	8002298 <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c36:	f7ff fb2f 	bl	8002298 <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0a2      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c48:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d1f1      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d100      	bne.n	8002c5c <HAL_RCC_OscConfig+0x4e4>
 8002c5a:	e097      	b.n	8002d8c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	220c      	movs	r2, #12
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d100      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4f2>
 8002c68:	e06b      	b.n	8002d42 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d14c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b49      	ldr	r3, [pc, #292]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c78:	494a      	ldr	r1, [pc, #296]	@ (8002da4 <HAL_RCC_OscConfig+0x62c>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7ff fb0b 	bl	8002298 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7ff fb06 	bl	8002298 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e079      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	049b      	lsls	r3, r3, #18
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	220f      	movs	r2, #15
 8002cac:	4393      	bics	r3, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cba:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8002da8 <HAL_RCC_OscConfig+0x630>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002cda:	2180      	movs	r1, #128	@ 0x80
 8002cdc:	0449      	lsls	r1, r1, #17
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7ff fad9 	bl	8002298 <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7ff fad4 	bl	8002298 <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e047      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfe:	4b26      	ldr	r3, [pc, #152]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	049b      	lsls	r3, r3, #18
 8002d06:	4013      	ands	r3, r2
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x574>
 8002d0a:	e03f      	b.n	8002d8c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0c:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d12:	4924      	ldr	r1, [pc, #144]	@ (8002da4 <HAL_RCC_OscConfig+0x62c>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fabe 	bl	8002298 <HAL_GetTick>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d22:	f7ff fab9 	bl	8002298 <HAL_GetTick>
 8002d26:	0002      	movs	r2, r0
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e02c      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d34:	4b18      	ldr	r3, [pc, #96]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	049b      	lsls	r3, r3, #18
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x5aa>
 8002d40:	e024      	b.n	8002d8c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e01f      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d54:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <HAL_RCC_OscConfig+0x620>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d58:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	025b      	lsls	r3, r3, #9
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d10e      	bne.n	8002d88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	401a      	ands	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	23f0      	movs	r3, #240	@ 0xf0
 8002d7c:	039b      	lsls	r3, r3, #14
 8002d7e:	401a      	ands	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b008      	add	sp, #32
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	00001388 	.word	0x00001388
 8002da0:	efffffff 	.word	0xefffffff
 8002da4:	feffffff 	.word	0xfeffffff
 8002da8:	ffc2ffff 	.word	0xffc2ffff

08002dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b3      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d911      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b58      	ldr	r3, [pc, #352]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	4b55      	ldr	r3, [pc, #340]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de0:	4b53      	ldr	r3, [pc, #332]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e09a      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2202      	movs	r2, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d015      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2204      	movs	r2, #4
 8002e02:	4013      	ands	r3, r2
 8002e04:	d006      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e06:	4b4b      	ldr	r3, [pc, #300]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e0c:	21e0      	movs	r1, #224	@ 0xe0
 8002e0e:	00c9      	lsls	r1, r1, #3
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b47      	ldr	r3, [pc, #284]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	22f0      	movs	r2, #240	@ 0xf0
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d040      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	029b      	lsls	r3, r3, #10
 8002e42:	4013      	ands	r3, r2
 8002e44:	d114      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06e      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	4b38      	ldr	r3, [pc, #224]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	@ 0x80
 8002e58:	049b      	lsls	r3, r3, #18
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e062      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	4b34      	ldr	r3, [pc, #208]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2202      	movs	r2, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e05b      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e70:	4b30      	ldr	r3, [pc, #192]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2203      	movs	r2, #3
 8002e76:	4393      	bics	r3, r2
 8002e78:	0019      	movs	r1, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e84:	f7ff fa08 	bl	8002298 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8e:	f7ff fa03 	bl	8002298 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a27      	ldr	r2, [pc, #156]	@ (8002f38 <HAL_RCC_ClockConfig+0x18c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e042      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b24      	ldr	r3, [pc, #144]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1ec      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d211      	bcs.n	8002ee6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4393      	bics	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	4b18      	ldr	r3, [pc, #96]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed4:	4b16      	ldr	r3, [pc, #88]	@ (8002f30 <HAL_RCC_ClockConfig+0x184>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e020      	b.n	8002f28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2204      	movs	r2, #4
 8002eec:	4013      	ands	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ef0:	4b10      	ldr	r3, [pc, #64]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <HAL_RCC_ClockConfig+0x190>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f04:	f000 f820 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f08:	0001      	movs	r1, r0
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x188>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	220f      	movs	r2, #15
 8002f12:	4013      	ands	r3, r2
 8002f14:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <HAL_RCC_ClockConfig+0x194>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	000a      	movs	r2, r1
 8002f1a:	40da      	lsrs	r2, r3
 8002f1c:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_RCC_ClockConfig+0x198>)
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7ff f973 	bl	800220c <HAL_InitTick>
  
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	00001388 	.word	0x00001388
 8002f3c:	fffff8ff 	.word	0xfffff8ff
 8002f40:	0800940c 	.word	0x0800940c
 8002f44:	2000001c 	.word	0x2000001c

08002f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f62:	4b20      	ldr	r3, [pc, #128]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d002      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x30>
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x36>
 8002f76:	e02c      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f78:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f7a:	613b      	str	r3, [r7, #16]
      break;
 8002f7c:	e02c      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0c9b      	lsrs	r3, r3, #18
 8002f82:	220f      	movs	r2, #15
 8002f84:	4013      	ands	r3, r2
 8002f86:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	220f      	movs	r2, #15
 8002f92:	4013      	ands	r3, r2
 8002f94:	4a16      	ldr	r2, [pc, #88]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	025b      	lsls	r3, r3, #9
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4810      	ldr	r0, [pc, #64]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fa8:	f7fd f8ae 	bl	8000108 <__udivsi3>
 8002fac:	0003      	movs	r3, r0
 8002fae:	001a      	movs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4353      	muls	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e009      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	000a      	movs	r2, r1
 8002fbc:	0152      	lsls	r2, r2, #5
 8002fbe:	1a52      	subs	r2, r2, r1
 8002fc0:	0193      	lsls	r3, r2, #6
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	185b      	adds	r3, r3, r1
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]
      break;
 8002fd0:	e002      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fd4:	613b      	str	r3, [r7, #16]
      break;
 8002fd6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fd8:	693b      	ldr	r3, [r7, #16]
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	007a1200 	.word	0x007a1200
 8002fec:	08009424 	.word	0x08009424
 8002ff0:	08009434 	.word	0x08009434

08002ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff8:	4b02      	ldr	r3, [pc, #8]	@ (8003004 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	2000001c 	.word	0x2000001c

08003008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800300c:	f7ff fff2 	bl	8002ff4 <HAL_RCC_GetHCLKFreq>
 8003010:	0001      	movs	r1, r0
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	2207      	movs	r2, #7
 800301a:	4013      	ands	r3, r2
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	40d9      	lsrs	r1, r3
 8003022:	000b      	movs	r3, r1
}    
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	40021000 	.word	0x40021000
 8003030:	0800941c 	.word	0x0800941c

08003034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e0a8      	b.n	8003198 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	2382      	movs	r3, #130	@ 0x82
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	429a      	cmp	r2, r3
 8003058:	d009      	beq.n	800306e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	61da      	str	r2, [r3, #28]
 8003060:	e005      	b.n	800306e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	225d      	movs	r2, #93	@ 0x5d
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	225c      	movs	r2, #92	@ 0x5c
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f7fe ffa4 	bl	8001fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	225d      	movs	r2, #93	@ 0x5d
 8003094:	2102      	movs	r1, #2
 8003096:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2140      	movs	r1, #64	@ 0x40
 80030a4:	438a      	bics	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	23e0      	movs	r3, #224	@ 0xe0
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d902      	bls.n	80030ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	e002      	b.n	80030c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030ba:	2380      	movs	r3, #128	@ 0x80
 80030bc:	015b      	lsls	r3, r3, #5
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	23f0      	movs	r3, #240	@ 0xf0
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d008      	beq.n	80030de <HAL_SPI_Init+0xaa>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	23e0      	movs	r3, #224	@ 0xe0
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	2382      	movs	r3, #130	@ 0x82
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	2384      	movs	r3, #132	@ 0x84
 80030ee:	021b      	lsls	r3, r3, #8
 80030f0:	400b      	ands	r3, r1
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2102      	movs	r1, #2
 80030fa:	400b      	ands	r3, r1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2101      	movs	r1, #1
 8003104:	400b      	ands	r3, r1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6999      	ldr	r1, [r3, #24]
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	400b      	ands	r3, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2138      	movs	r1, #56	@ 0x38
 800311a:	400b      	ands	r3, r1
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	2180      	movs	r1, #128	@ 0x80
 8003124:	400b      	ands	r3, r1
 8003126:	431a      	orrs	r2, r3
 8003128:	0011      	movs	r1, r2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	401a      	ands	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	2204      	movs	r2, #4
 8003144:	401a      	ands	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	2110      	movs	r1, #16
 800314c:	400b      	ands	r3, r1
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003154:	2108      	movs	r1, #8
 8003156:	400b      	ands	r3, r1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68d9      	ldr	r1, [r3, #12]
 800315e:	23f0      	movs	r3, #240	@ 0xf0
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	400b      	ands	r3, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	0011      	movs	r1, r2
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	015b      	lsls	r3, r3, #5
 800316e:	401a      	ands	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4907      	ldr	r1, [pc, #28]	@ (80031a0 <HAL_SPI_Init+0x16c>)
 8003184:	400a      	ands	r2, r1
 8003186:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	225d      	movs	r2, #93	@ 0x5d
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b004      	add	sp, #16
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	fffff7ff 	.word	0xfffff7ff

080031a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e044      	b.n	8003240 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2278      	movs	r2, #120	@ 0x78
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f7fe ff77 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2224      	movs	r2, #36	@ 0x24
 80031d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f96c 	bl	80034cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f828 	bl	800324c <UART_SetConfig>
 80031fc:	0003      	movs	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e01c      	b.n	8003240 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	490d      	ldr	r1, [pc, #52]	@ (8003248 <HAL_UART_Init+0xa4>)
 8003212:	400a      	ands	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2108      	movs	r1, #8
 8003222:	438a      	bics	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 f9fb 	bl	8003634 <UART_CheckIdleState>
 800323e:	0003      	movs	r3, r0
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	fffff7ff 	.word	0xfffff7ff

0800324c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003254:	231e      	movs	r3, #30
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a8d      	ldr	r2, [pc, #564]	@ (80034b0 <UART_SetConfig+0x264>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a88      	ldr	r2, [pc, #544]	@ (80034b4 <UART_SetConfig+0x268>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a7f      	ldr	r2, [pc, #508]	@ (80034b8 <UART_SetConfig+0x26c>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7b      	ldr	r2, [pc, #492]	@ (80034bc <UART_SetConfig+0x270>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d127      	bne.n	8003322 <UART_SetConfig+0xd6>
 80032d2:	4b7b      	ldr	r3, [pc, #492]	@ (80034c0 <UART_SetConfig+0x274>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	2203      	movs	r2, #3
 80032d8:	4013      	ands	r3, r2
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d00d      	beq.n	80032fa <UART_SetConfig+0xae>
 80032de:	d81b      	bhi.n	8003318 <UART_SetConfig+0xcc>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d014      	beq.n	800330e <UART_SetConfig+0xc2>
 80032e4:	d818      	bhi.n	8003318 <UART_SetConfig+0xcc>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <UART_SetConfig+0xa4>
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d00a      	beq.n	8003304 <UART_SetConfig+0xb8>
 80032ee:	e013      	b.n	8003318 <UART_SetConfig+0xcc>
 80032f0:	231f      	movs	r3, #31
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e021      	b.n	800333e <UART_SetConfig+0xf2>
 80032fa:	231f      	movs	r3, #31
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e01c      	b.n	800333e <UART_SetConfig+0xf2>
 8003304:	231f      	movs	r3, #31
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2204      	movs	r2, #4
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e017      	b.n	800333e <UART_SetConfig+0xf2>
 800330e:	231f      	movs	r3, #31
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2208      	movs	r2, #8
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e012      	b.n	800333e <UART_SetConfig+0xf2>
 8003318:	231f      	movs	r3, #31
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2210      	movs	r2, #16
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e00d      	b.n	800333e <UART_SetConfig+0xf2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a67      	ldr	r2, [pc, #412]	@ (80034c4 <UART_SetConfig+0x278>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d104      	bne.n	8003336 <UART_SetConfig+0xea>
 800332c:	231f      	movs	r3, #31
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e003      	b.n	800333e <UART_SetConfig+0xf2>
 8003336:	231f      	movs	r3, #31
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2210      	movs	r2, #16
 800333c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	2380      	movs	r3, #128	@ 0x80
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	429a      	cmp	r2, r3
 8003348:	d15c      	bne.n	8003404 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800334a:	231f      	movs	r3, #31
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d015      	beq.n	8003380 <UART_SetConfig+0x134>
 8003354:	dc18      	bgt.n	8003388 <UART_SetConfig+0x13c>
 8003356:	2b04      	cmp	r3, #4
 8003358:	d00d      	beq.n	8003376 <UART_SetConfig+0x12a>
 800335a:	dc15      	bgt.n	8003388 <UART_SetConfig+0x13c>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <UART_SetConfig+0x11a>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d005      	beq.n	8003370 <UART_SetConfig+0x124>
 8003364:	e010      	b.n	8003388 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003366:	f7ff fe4f 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 800336a:	0003      	movs	r3, r0
 800336c:	61bb      	str	r3, [r7, #24]
        break;
 800336e:	e012      	b.n	8003396 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003370:	4b55      	ldr	r3, [pc, #340]	@ (80034c8 <UART_SetConfig+0x27c>)
 8003372:	61bb      	str	r3, [r7, #24]
        break;
 8003374:	e00f      	b.n	8003396 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003376:	f7ff fde7 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 800337a:	0003      	movs	r3, r0
 800337c:	61bb      	str	r3, [r7, #24]
        break;
 800337e:	e00a      	b.n	8003396 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	61bb      	str	r3, [r7, #24]
        break;
 8003386:	e006      	b.n	8003396 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800338c:	231e      	movs	r3, #30
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
        break;
 8003394:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d100      	bne.n	800339e <UART_SetConfig+0x152>
 800339c:	e07a      	b.n	8003494 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	005a      	lsls	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	085b      	lsrs	r3, r3, #1
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f7fc fea9 	bl	8000108 <__udivsi3>
 80033b6:	0003      	movs	r3, r0
 80033b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d91c      	bls.n	80033fa <UART_SetConfig+0x1ae>
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	025b      	lsls	r3, r3, #9
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d217      	bcs.n	80033fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	200e      	movs	r0, #14
 80033d0:	183b      	adds	r3, r7, r0
 80033d2:	210f      	movs	r1, #15
 80033d4:	438a      	bics	r2, r1
 80033d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2207      	movs	r2, #7
 80033e0:	4013      	ands	r3, r2
 80033e2:	b299      	uxth	r1, r3
 80033e4:	183b      	adds	r3, r7, r0
 80033e6:	183a      	adds	r2, r7, r0
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	183a      	adds	r2, r7, r0
 80033f4:	8812      	ldrh	r2, [r2, #0]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e04c      	b.n	8003494 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80033fa:	231e      	movs	r3, #30
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
 8003402:	e047      	b.n	8003494 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003404:	231f      	movs	r3, #31
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b08      	cmp	r3, #8
 800340c:	d015      	beq.n	800343a <UART_SetConfig+0x1ee>
 800340e:	dc18      	bgt.n	8003442 <UART_SetConfig+0x1f6>
 8003410:	2b04      	cmp	r3, #4
 8003412:	d00d      	beq.n	8003430 <UART_SetConfig+0x1e4>
 8003414:	dc15      	bgt.n	8003442 <UART_SetConfig+0x1f6>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <UART_SetConfig+0x1d4>
 800341a:	2b02      	cmp	r3, #2
 800341c:	d005      	beq.n	800342a <UART_SetConfig+0x1de>
 800341e:	e010      	b.n	8003442 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7ff fdf2 	bl	8003008 <HAL_RCC_GetPCLK1Freq>
 8003424:	0003      	movs	r3, r0
 8003426:	61bb      	str	r3, [r7, #24]
        break;
 8003428:	e012      	b.n	8003450 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342a:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <UART_SetConfig+0x27c>)
 800342c:	61bb      	str	r3, [r7, #24]
        break;
 800342e:	e00f      	b.n	8003450 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003430:	f7ff fd8a 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8003434:	0003      	movs	r3, r0
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e00a      	b.n	8003450 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	61bb      	str	r3, [r7, #24]
        break;
 8003440:	e006      	b.n	8003450 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003446:	231e      	movs	r3, #30
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
        break;
 800344e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01e      	beq.n	8003494 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	085a      	lsrs	r2, r3, #1
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	18d2      	adds	r2, r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	0019      	movs	r1, r3
 8003466:	0010      	movs	r0, r2
 8003468:	f7fc fe4e 	bl	8000108 <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	d90a      	bls.n	800348c <UART_SetConfig+0x240>
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	2380      	movs	r3, #128	@ 0x80
 800347a:	025b      	lsls	r3, r3, #9
 800347c:	429a      	cmp	r2, r3
 800347e:	d205      	bcs.n	800348c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e003      	b.n	8003494 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800348c:	231e      	movs	r3, #30
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034a0:	231e      	movs	r3, #30
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b008      	add	sp, #32
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	ffff69f3 	.word	0xffff69f3
 80034b4:	ffffcfff 	.word	0xffffcfff
 80034b8:	fffff4ff 	.word	0xfffff4ff
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40004400 	.word	0x40004400
 80034c8:	007a1200 	.word	0x007a1200

080034cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	2208      	movs	r2, #8
 80034da:	4013      	ands	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003610 <UART_AdvFeatureConfig+0x144>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	2201      	movs	r2, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	d00b      	beq.n	8003518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a43      	ldr	r2, [pc, #268]	@ (8003614 <UART_AdvFeatureConfig+0x148>)
 8003508:	4013      	ands	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	2202      	movs	r2, #2
 800351e:	4013      	ands	r3, r2
 8003520:	d00b      	beq.n	800353a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a3b      	ldr	r2, [pc, #236]	@ (8003618 <UART_AdvFeatureConfig+0x14c>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	2204      	movs	r2, #4
 8003540:	4013      	ands	r3, r2
 8003542:	d00b      	beq.n	800355c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a34      	ldr	r2, [pc, #208]	@ (800361c <UART_AdvFeatureConfig+0x150>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	2210      	movs	r2, #16
 8003562:	4013      	ands	r3, r2
 8003564:	d00b      	beq.n	800357e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <UART_AdvFeatureConfig+0x154>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	2220      	movs	r2, #32
 8003584:	4013      	ands	r3, r2
 8003586:	d00b      	beq.n	80035a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4a25      	ldr	r2, [pc, #148]	@ (8003624 <UART_AdvFeatureConfig+0x158>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	2240      	movs	r2, #64	@ 0x40
 80035a6:	4013      	ands	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003628 <UART_AdvFeatureConfig+0x15c>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	035b      	lsls	r3, r3, #13
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <UART_AdvFeatureConfig+0x160>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00b      	beq.n	8003608 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <UART_AdvFeatureConfig+0x164>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }
}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}
 8003610:	ffff7fff 	.word	0xffff7fff
 8003614:	fffdffff 	.word	0xfffdffff
 8003618:	fffeffff 	.word	0xfffeffff
 800361c:	fffbffff 	.word	0xfffbffff
 8003620:	ffffefff 	.word	0xffffefff
 8003624:	ffffdfff 	.word	0xffffdfff
 8003628:	ffefffff 	.word	0xffefffff
 800362c:	ff9fffff 	.word	0xff9fffff
 8003630:	fff7ffff 	.word	0xfff7ffff

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b092      	sub	sp, #72	@ 0x48
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2284      	movs	r2, #132	@ 0x84
 8003640:	2100      	movs	r1, #0
 8003642:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fe fe28 	bl	8002298 <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2208      	movs	r2, #8
 8003654:	4013      	ands	r3, r2
 8003656:	2b08      	cmp	r3, #8
 8003658:	d12c      	bne.n	80036b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800365c:	2280      	movs	r2, #128	@ 0x80
 800365e:	0391      	lsls	r1, r2, #14
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4a46      	ldr	r2, [pc, #280]	@ (800377c <UART_CheckIdleState+0x148>)
 8003664:	9200      	str	r2, [sp, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	f000 f88c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d021      	beq.n	80036b4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003670:	f3ef 8310 	mrs	r3, PRIMASK
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800367a:	2301      	movs	r3, #1
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	438a      	bics	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	f383 8810 	msr	PRIMASK, r3
}
 80036a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2278      	movs	r2, #120	@ 0x78
 80036ac:	2100      	movs	r1, #0
 80036ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e05f      	b.n	8003774 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2204      	movs	r2, #4
 80036bc:	4013      	ands	r3, r2
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d146      	bne.n	8003750 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	03d1      	lsls	r1, r2, #15
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <UART_CheckIdleState+0x148>)
 80036cc:	9200      	str	r2, [sp, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f000 f858 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d03b      	beq.n	8003750 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80036de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e2:	2301      	movs	r3, #1
 80036e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4921      	ldr	r1, [pc, #132]	@ (8003780 <UART_CheckIdleState+0x14c>)
 80036fa:	400a      	ands	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370a:	f3ef 8310 	mrs	r3, PRIMASK
 800370e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003710:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	633b      	str	r3, [r7, #48]	@ 0x30
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	2120      	movs	r1, #32
 8003742:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2278      	movs	r2, #120	@ 0x78
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e011      	b.n	8003774 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	@ 0x80
 800375a:	2120      	movs	r1, #32
 800375c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2278      	movs	r2, #120	@ 0x78
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b010      	add	sp, #64	@ 0x40
 800377a:	bd80      	pop	{r7, pc}
 800377c:	01ffffff 	.word	0x01ffffff
 8003780:	fffffedf 	.word	0xfffffedf

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e051      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3301      	adds	r3, #1
 800379a:	d04e      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379c:	f7fe fd7c 	bl	8002298 <HAL_GetTick>
 80037a0:	0002      	movs	r2, r0
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e051      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2204      	movs	r2, #4
 80037be:	4013      	ands	r3, r2
 80037c0:	d03b      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b80      	cmp	r3, #128	@ 0x80
 80037c6:	d038      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d035      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2208      	movs	r2, #8
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d111      	bne.n	8003800 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2208      	movs	r2, #8
 80037e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f83c 	bl	8003864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2284      	movs	r2, #132	@ 0x84
 80037f0:	2108      	movs	r1, #8
 80037f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2278      	movs	r2, #120	@ 0x78
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02c      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	401a      	ands	r2, r3
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	429a      	cmp	r2, r3
 8003812:	d112      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f81f 	bl	8003864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2284      	movs	r2, #132	@ 0x84
 800382a:	2120      	movs	r1, #32
 800382c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2278      	movs	r2, #120	@ 0x78
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	425a      	negs	r2, r3
 800384a:	4153      	adcs	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	001a      	movs	r2, r3
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d09e      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	@ 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	617b      	str	r3, [r7, #20]
  return(result);
 8003872:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	637b      	str	r3, [r7, #52]	@ 0x34
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4926      	ldr	r1, [pc, #152]	@ (8003928 <UART_EndRxTransfer+0xc4>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	623b      	str	r3, [r7, #32]
  return(result);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d118      	bne.n	800390a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e2:	2301      	movs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2110      	movs	r1, #16
 80038fa:	438a      	bics	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	@ 0x80
 800390e:	2120      	movs	r1, #32
 8003910:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b00e      	add	sp, #56	@ 0x38
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	fffffedf 	.word	0xfffffedf

0800392c <memset>:
 800392c:	0003      	movs	r3, r0
 800392e:	1882      	adds	r2, r0, r2
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	7019      	strb	r1, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	2600      	movs	r6, #0
 8003940:	4c0c      	ldr	r4, [pc, #48]	@ (8003974 <__libc_init_array+0x38>)
 8003942:	4d0d      	ldr	r5, [pc, #52]	@ (8003978 <__libc_init_array+0x3c>)
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	42a6      	cmp	r6, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	2600      	movs	r6, #0
 800394e:	f000 f819 	bl	8003984 <_init>
 8003952:	4c0a      	ldr	r4, [pc, #40]	@ (800397c <__libc_init_array+0x40>)
 8003954:	4d0a      	ldr	r5, [pc, #40]	@ (8003980 <__libc_init_array+0x44>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	42a6      	cmp	r6, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	00b3      	lsls	r3, r6, #2
 8003962:	58eb      	ldr	r3, [r5, r3]
 8003964:	4798      	blx	r3
 8003966:	3601      	adds	r6, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	00b3      	lsls	r3, r6, #2
 800396c:	58eb      	ldr	r3, [r5, r3]
 800396e:	4798      	blx	r3
 8003970:	3601      	adds	r6, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	08009444 	.word	0x08009444
 8003978:	08009444 	.word	0x08009444
 800397c:	08009448 	.word	0x08009448
 8003980:	08009444 	.word	0x08009444

08003984 <_init>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398a:	bc08      	pop	{r3}
 800398c:	469e      	mov	lr, r3
 800398e:	4770      	bx	lr

08003990 <_fini>:
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003996:	bc08      	pop	{r3}
 8003998:	469e      	mov	lr, r3
 800399a:	4770      	bx	lr
